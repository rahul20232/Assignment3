import java.util.ArrayList;
import java.util.Scanner;

class Matrix{
    private int row;
    private int coloumn;
    private double[][] arr;
    private double[] arr_1;
    private double arr_2;
    private String name;
    private ArrayList Matrix_type = new ArrayList();

    public Matrix(int row, int coloumn, double[][] arr, String name){
        this.row = row;
        this.coloumn = coloumn;
        this.arr = arr;
        this.name = name;

    }
    public Matrix(int row, int coloumn, double[] arr, String name){
        this.row = row;
        this.coloumn = coloumn;
        this.arr_1= arr;
        this.name = name;

    }
    public Matrix(int row, int coloumn, double arr, String name){
        this.row = row;
        this.coloumn = coloumn;
        this.arr_2= arr;
        this.name = name;

    }
    public Matrix(int row, int coloumn, String name) {
        this.row = row;
        this.coloumn = coloumn;
        this.arr = arr;
        this.name = name;
    }


    double[][] getArr(){
        return arr;
    }
    double[] getArray(){
        return arr_1;
    }
    double get_intArr(){
        return this.arr_2;
    }
    int getRow(){
        return this.row;
    }
    int getColoumn(){
        return this.coloumn;
    }
    public String getName(){
        return this.name;
    }
    void get_Row_mean(){
        for(int i = 0;i< arr.length;i++){
            System.out.print("Mean of row"+(i+1)+": ");
            double mean = 0;
            for(int j = 0;j< arr[i].length;j++){
                mean += arr[i][j];
            }
            System.out.print(mean/arr[i].length);
            System.out.println();
        }
    }
    void get_Coloumn_mean(){
        double[][] trans = transpose_1();
        for(int i = 0;i< trans.length;i++){
            System.out.print("Mean of coloumn"+(i+1)+": ");
            double mean = 0;
            for(int j = 0;j< trans[i].length;j++){
                mean += trans[i][j];
            }
            System.out.print(mean/trans[i].length);
            System.out.println();
        }
    }
    void Total_mean(){
        System.out.print("Mean: ");
        double mean = 0;
        for(int i = 0;i< arr.length;i++){
            for(int j = 0;j< arr[i].length;j++){
                mean += arr[i][j];
            }
        }
        System.out.println(mean/(getColoumn()*getRow()));
    }
    double[][] transpose_1(){
        double[][] trans = new double[this.coloumn][this.row];
        for(int i = 0;i< trans.length;i++){
            for(int j = 0;j< trans[i].length;j++){
                trans[i][j] = arr[j][i];
            }
        }
        return trans;
    }
    void setMatrix_type(String x){
        this.Matrix_type.add(x);
    }
    Matrix set_Matrix(){
        Matrix m = new Matrix(this.row, this.coloumn,this.arr,this.name);
        boolean flag1 = true;
        boolean flag2 = true;
        boolean flag3 = true;
        boolean flag4 = true;
        boolean flag5 = true;
        boolean flag6 = true;
        boolean flag7 = true;
        for(int i = 0;i<this.row;i++){
            for(int j = 0;j<this.coloumn;j++){
                if(this.arr[i][j]!=0){
                    flag1 = false;
                }
            }
        }
        if(flag1){
            m = new Null_Matrix(this.row, this.coloumn, this.name);
            return m;
        }
        for(int i = 0;i<this.row;i++){
            for(int j = 0;j<this.coloumn;j++){
                if(this.arr[i][j]!=1){
                    flag2 = false;
                }
            }
        }
        if(flag2){
            m = new Ones_Matrix(this.row, this.coloumn, this.name);
            return m;
        }
        if(!flag1 && !flag2){
            if(this.row!=this.coloumn){
                if(this.row==1){
                    double[] arr2 = new double[this.coloumn];
                    if(this.coloumn==2){
                        arr2[0] = arr[0][0];
                        arr2[1] = arr[0][1];
                        m = new Row_Matrix(this.row, this.coloumn,arr2, this.name);
                        return m;
                    }
                    if(this.coloumn==3){
                        arr2[0] = arr[0][0];
                        arr2[1] = arr[0][1];
                        arr2[2] = arr[0][2];
                        m = new Row_Matrix(this.row, this.coloumn,arr2, this.name);
                        return m;
                    }
                }
                else if(this.coloumn==1){
                    double[] arr2 = new double[this.row];
                    if(this.row==2){
                        arr2[0] = arr[0][0];
                        arr2[1] = arr[1][0];
                        m = new Coloumn_Matrix(this.row, this.coloumn,arr2, this.name);
                        return m;
                    }
                    if(this.row==3){
                        arr2[0] = arr[0][0];
                        arr2[1] = arr[1][0];
                        arr2[2] = arr[2][0];
                        m = new Coloumn_Matrix(this.row, this.coloumn,arr2, this.name);
                        return m;
                    }
                }
                else{
                    m = new Rectangular_Matrix(this.row, this.coloumn,this.arr, this.name);
                    return m;
                }
            }
            else{
                if(this.row==1){
                    double arr2 = arr[0][0];
                    m = new Singleton_Matrix(row, coloumn,arr2, name);
                    return m;
                }
                for(int i = 0;i<this.row;i++){
                    for(int j = 0;j<this.coloumn;j++){
                        if(i==j){
                            if(this.arr[i][j]!=1){
                                flag3 = false;
                            }
                        }
                        else{
                            if(this.arr[i][j]!=0){
                                flag3 = false;
                            }
                        }
                    }
                }
                if(flag3){
                    m = new Identity_Matrix(this.row, this.coloumn, this.name);
                    return m;
                }

                for(int i = 0;i<this.row;i++){
                    for(int j = 0;j<this.coloumn;j++){
                        if(j>=i){
                            if(this.arr[i][j]==0){
                                flag4 = false;
                            }
                        }
                        else{
                            if(this.arr[i][j]!=0){
                                flag4 = false;
                            }
                        }
                    }
                }
                if(flag4){
                    m = new Upper_Tringular_Matrix(this.row, this.coloumn,this.arr, this.name);
                    return m;
                }
                for(int i = 0;i<this.row;i++){
                    for(int j = 0;j<this.coloumn;j++){
                        if(j<=i){
                            if(this.arr[i][j]==0){
                                flag5 = false;
                            }
                        }
                        else{
                            if(this.arr[i][j]!=0){
                                flag5 = false;
                            }
                        }
                    }
                }
                if(flag5){
                    m = new Lower_Tringular_Matrix(this.row, this.coloumn,this.arr, this.name);
                    return m;
                }
                for(int i = 0;i<this.row;i++){
                    for(int j = 0;j<this.coloumn;j++){
                        if(i==j){
                            if(this.arr[i][j]==0){
                                flag6 = false;
                                flag7 = false;
                            }
                            if(i!=0 && this.arr[i][j]==this.arr[0][0]){
                                flag7 = false;
                            }
                            if(i!=0 && this.arr[i][j]!=this.arr[0][0]){
                                flag6 = false;
                            }
                        }
                        else{
                            if(this.arr[i][j]!=0){
                                flag6 = false;
                                flag7 = false;
                            }
                        }
                    }
                }
                if(flag6){
                    double arr2 = arr[0][0];
                    m = new Scalar_Matrix(this.row, this.coloumn,arr2, this.name);
                    return m;
                }
                if(flag7){
                    double[] arr2 = new double[this.getRow()];
                    if(this.getRow()==2){
                        arr2[0] = this.arr[0][0];
                        arr2[1] = this.arr[1][1];
                    }
                    if(this.getRow()==3){
                        arr2[0] = this.arr[0][0];
                        arr2[1] = this.arr[1][1];
                        arr2[2] = this.arr[2][2];
                    }
                    m = new Diagonal_Matrix(this.row, this.coloumn,arr2, this.name);
                    return m;
                }
                double[][] arr1 = transpose_1();
                boolean yes = false;
                for(int i = 0;i<this.row;i++){
                    for(int j = 0;j<this.coloumn;j++){
                        if(this.arr[i][j]!=arr1[i][j]){
                            yes = true;
                        }
                    }
                }
                if(!yes){
                    m = new Symmetric_Matrix( this.row, this.coloumn, this.arr, this.name);
                    return m;
                }
                boolean yes1 = false;
                for(int i = 0;i<this.row;i++){
                    for(int j = 0;j<this.coloumn;j++){
                        if(this.arr[i][j]!=-arr1[i][j]){
                            yes1 = true;
                        }
                    }
                }
                if(!yes1){
                    m = new Skew_Symmetric_Matrix( this.row, this.coloumn, this.arr, this.name);
                    return m;
                }
                if(determinant()==0){
                    m = new Singular_Matrix(this.row, this.coloumn,this.arr, this.name);
                    return m;
                }
                if(this.row!=1){
                    m = new Square_Matrix(this.row, this.coloumn,this.arr, this.name);
                    return m;
                }
            }
        }
        return null;
    }
    ArrayList get_Matrix_type(){
        return this.Matrix_type;
    }
    double[][] compute_transpose_addition(){
        double[][] trans = transpose_1();
        double[][] arr3 = new double[getRow()][getColoumn()];
        for(int i = 0;i<arr.length;i++){
            for(int j = 0;j<arr[i].length;j++){
                arr3[i][j] = arr[i][j]+trans[i][j];
            }
        }
        return arr3;
    }
    double[][] adj_2(){
        double[][] adj = new double[2][2];
        adj[0][0] = arr[1][1];
        adj[1][1] = arr[0][0];
        adj[0][1] = -arr[0][1];
        adj[1][0] = -arr[1][0];
        return adj;
    }
    double[][] adj_3(){
        double[][] adj = new double[3][3];
        double det1 = this.arr[1][1]*this.arr[2][2]-this.arr[1][2]*this.arr[2][1];
        double det2 = -(this.arr[0][1]*this.arr[2][2]-this.arr[2][1]*this.arr[0][2]);
        double det3 = (this.arr[0][1]*this.arr[1][2]-this.arr[1][1]*this.arr[0][2]);
        double det4 = -(this.arr[1][0]*this.arr[2][2]-this.arr[2][0]*this.arr[1][2]);
        double det5 = (this.arr[0][0]*this.arr[2][2]-this.arr[2][0]*this.arr[0][2]);
        double det6 = -(this.arr[0][0]*this.arr[1][2]-this.arr[1][0]*this.arr[0][2]);
        double det7 = (this.arr[1][0]*this.arr[2][1]-this.arr[2][0]*this.arr[1][1]);
        double det8 = -(this.arr[0][0]*this.arr[2][1]-this.arr[2][0]*this.arr[0][1]);
        double det9 = (this.arr[0][0]*this.arr[1][1]-this.arr[1][0]*this.arr[0][1]);
        adj[0][0] = det1;
        adj[0][1] = det2;
        adj[0][2] = det3;
        adj[1][0] = det4;
        adj[1][1] = det5;
        adj[1][2] = det6;
        adj[2][0] = det7;
        adj[2][1] = det8;
        adj[2][2] = det9;
        return adj;
    }
    double determinant(){
        if(this.getRow()==this.getColoumn()){
            if(this.getRow()==2){
                return arr[0][0]*arr[1][1]-arr[0][1]*arr[1][0];
            }
            else if(this.getRow()==3){
                return arr[0][0]*(arr[1][1]*arr[2][2]-arr[2][1]*arr[1][2]) - arr[0][1]*(arr[1][0]*arr[2][2]-arr[2][0]*arr[1][2])+ arr[0][2]*(arr[1][0]*arr[2][1]-arr[2][0]*arr[1][1]);
            }
        }
        return 0;
    }
    double[][] inverse_2(){
        if(this.getRow()==this.getColoumn()){
            if(this.getRow()==1){
                double[][] inv = {{1}};
                return inv;
            }
            if(this.getRow()==2){
                double[][] adj = adj_2();
                double det = this.determinant();
                double[][] inv = new double[this.getRow()][this.getColoumn()];
                if(det!=0){
                    for(int i = 0;i<this.getRow();i++){
                        for(int j = 0;j<this.getColoumn();j++){
                            inv[i][j] = adj[i][j]/det;
                        }
                    }
                    return inv;
                }
            }
            if(this.getRow()==3){
                double[][] adj = adj_3();
                double det = this.determinant();
                double[][] inv = new double[this.getRow()][this.getColoumn()];
                if(det!=0){
                    for(int i = 0;i<this.getRow();i++){
                        for(int j = 0;j<this.getColoumn();j++){
                            inv[i][j] = adj[i][j]/det;
                        }
                    }
                    return inv;
                }
            }
        }
        return null;
    }
    double[][] add(Matrix m1){
        if(this.getRow()==m1.getRow() && this.getColoumn()==m1.getColoumn()){
            double[][] arr1 = this.getArr();
            boolean flag1 = true;
            boolean flag2 = true;
            boolean flag3 = true;
            boolean flag4 = true;
            boolean flag5 = true;
            for(int i = 0;i<m1.get_Matrix_type().size();i++){
                if(m1.get_Matrix_type().get(i).equals("Diagonal Matrix")){
                    flag1 = false;
                }
                if(m1.get_Matrix_type().get(i).equals("Scalar Matrix")){
                    flag2 = false;
                }
                if(m1.get_Matrix_type().get(i).equals("Identity Matrix")){
                    flag3 = false;
                }
                if(m1.get_Matrix_type().get(i).equals("Ones Matrix")){
                    flag4 = false;
                }
                if(m1.get_Matrix_type().get(i).equals("Null Matrix")){
                    flag5 = false;
                }
            }
            double[][] arr3 = new double[this.getRow()][this.getColoumn()];
            if(!flag5){
                for(int i = 0;i<this.getRow();i++){
                    for(int j = 0;j<this.getColoumn();j++){
                        arr3[i][j] = arr1[i][j];
                    }
                }
            }
            else if(!flag4){
                for(int i = 0;i<this.getRow();i++){
                    for(int j = 0;j<this.getColoumn();j++){
                        arr3[i][j] = arr1[i][j]+1;
                    }
                }
            }
            else if(!flag3){
                for(int i = 0;i<this.getRow();i++){
                    for(int j = 0;j<this.getColoumn();j++){
                        if(i==j){
                            arr3[i][j] = arr1[i][j]+1;
                        }
                        else{
                            arr3[i][j] = arr1[i][j];
                        }
                    }
                }
            }
            else if(!flag2){
                double arr2 = m1.get_intArr();
                for(int i = 0;i<this.getRow();i++){
                    for(int j = 0;j<this.getColoumn();j++){
                        if(i==j){
                            arr3[i][j] = arr1[i][j]+arr2;
                        }
                        else{
                            arr3[i][j] = arr1[i][j];
                        }
                    }
                }
            }
            else if(!flag1){
                double[] arr2 = m1.getArray();
                for(int i = 0;i<this.getRow();i++){
                    for(int j = 0;j<this.getColoumn();j++){
                        if(i==j){
                            arr3[i][j] = arr1[i][j]+arr2[i];
                        }
                        else{
                            arr3[i][j] = arr1[i][j];
                        }
                    }
                }
            }
            else{
                double[][] arr2 = m1.getArr();
                for(int i = 0;i<this.getRow();i++){
                    for(int j = 0;j<this.getColoumn();j++){
                        arr3[i][j] = arr1[i][j]+arr2[i][j];
                    }
                }
            }
            return arr3;
        }
        else{
            System.out.println("These matrices cannot be added");
            return null;
        }
    }
    double[][] sub(Matrix m1){
        if(this.getRow()==m1.getRow() && this.getColoumn()==m1.getColoumn()){
            double[][] arr1 = this.getArr();
            boolean flag1 = true;
            boolean flag2 = true;
            boolean flag3 = true;
            boolean flag4 = true;
            boolean flag5 = true;
            for(int i = 0;i<m1.get_Matrix_type().size();i++){
                if(m1.get_Matrix_type().get(i).equals("Diagonal Matrix")){
                    flag1 = false;
                }
                if(m1.get_Matrix_type().get(i).equals("Scalar Matrix")){
                    flag2 = false;
                }
                if(m1.get_Matrix_type().get(i).equals("Identity Matrix")){
                    flag3 = false;
                }
                if(m1.get_Matrix_type().get(i).equals("Ones Matrix")){
                    flag4 = false;
                }
                if(m1.get_Matrix_type().get(i).equals("Null Matrix")){
                    flag5 = false;
                }
            }
            double[][] arr3 = new double[this.getRow()][this.getColoumn()];
            if(!flag5){
                for(int i = 0;i<this.getRow();i++){
                    for(int j = 0;j<this.getColoumn();j++){
                        arr3[i][j] = arr1[i][j];
                    }
                }
            }
            else if(!flag4){
                for(int i = 0;i<this.getRow();i++){
                    for(int j = 0;j<this.getColoumn();j++){
                        arr3[i][j] = arr1[i][j]-1;
                    }
                }
            }
            else if(!flag3){
                for(int i = 0;i<this.getRow();i++){
                    for(int j = 0;j<this.getColoumn();j++){
                        if(i==j){
                            arr3[i][j] = arr1[i][j]-1;
                        }
                        else{
                            arr3[i][j] = arr1[i][j];
                        }
                    }
                }
            }
            else if(!flag2){
                double arr2 = m1.get_intArr();
                for(int i = 0;i<this.getRow();i++){
                    for(int j = 0;j<this.getColoumn();j++){
                        if(i==j){
                            arr3[i][j] = arr1[i][j]-arr2;
                        }
                        else{
                            arr3[i][j] = arr1[i][j];
                        }
                    }
                }
            }
            else if(!flag1){
                double[] arr2 = m1.getArray();
                for(int i = 0;i<this.getRow();i++){
                    for(int j = 0;j<this.getColoumn();j++){
                        if(i==j){
                            arr3[i][j] = arr1[i][j]-arr2[i];
                        }
                        else{
                            arr3[i][j] = arr1[i][j];
                        }
                    }
                }
            }
            else{
                double[][] arr2 = m1.getArr();
                for(int i = 0;i<this.getRow();i++){
                    for(int j = 0;j<this.getColoumn();j++){
                        arr3[i][j] = arr1[i][j]-arr2[i][j];
                    }
                }
            }
            return arr3;
        }
        else{
            System.out.println("These matrices cannot be subtracted");
            return null;
        }
    }
    double[][] mul(Matrix m1){

        if(this.getColoumn()==m1.getRow()){
            double[][] arr1 = this.getArr();
            boolean flag1 = true;
            boolean flag2 = true;
            boolean flag3 = true;
            boolean flag4 = true;
            boolean flag5 = true;
            for(int i = 0;i<m1.get_Matrix_type().size();i++){
                if(m1.get_Matrix_type().get(i).equals("Diagonal Matrix")){
                    flag1 = false;
                }
                if(m1.get_Matrix_type().get(i).equals("Scalar Matrix")){
                    flag2 = false;
                }
                if(m1.get_Matrix_type().get(i).equals("Identity Matrix")){
                    flag3 = false;
                }
                if(m1.get_Matrix_type().get(i).equals("Ones Matrix")){
                    flag4 = false;
                }
                if(m1.get_Matrix_type().get(i).equals("Null Matrix")){
                    flag5 = false;
                }
            }
            double[][] arr3 = new double[this.getRow()][m1.getColoumn()];
            if(!flag5){
                for(int i = 0;i<this.getRow();i++){
                    for(int j = 0;j<m1.getColoumn();j++){
                        arr3[i][j] = 0;
                    }
                }
            }
            else if (!flag4){
                double[][] arr_x = new double[m1.getRow()][m1.getColoumn()];
                for(int i = 0;i<m1.getRow();i++){
                    for(int j = 0;j<m1.getColoumn();j++){
                        arr_x[i][j] = 1;
                    }
                }
                for(int i = 0;i<this.getRow();i++){
                    for(int j = 0;j<m1.getColoumn();j++) {
                        for(int r = 0;r<m1.getRow();r++){
                            arr3[i][j] += arr1[i][r]*arr_x[r][j];
                        }
                    }
                }
            }
            else if(!flag3){
                for(int i = 0;i<this.getRow();i++){
                    for(int j = 0;j<m1.getColoumn();j++){
                        arr3[i][j] = arr1[i][j];
                    }
                }
            }
            else if(!flag2){
                double arr2 = m1.get_intArr();
                double[][] arr_x = new double[m1.getRow()][m1.getColoumn()];
                for(int i = 0;i<m1.getRow();i++){
                    for(int j = 0;j<m1.getColoumn();j++){
                        if(i==j){
                            arr_x[i][j] = arr2;
                        }
                        else{
                            arr_x[i][j] = 0;
                        }
                    }
                }
                for(int i = 0;i<this.getRow();i++){
                    for(int j = 0;j<m1.getColoumn();j++) {
                        for(int r = 0;r<m1.getRow();r++){
                            arr3[i][j] += arr1[i][r]*arr_x[r][j];
                        }
                    }
                }
            }
            else if(!flag1){
                double[] arr2 = m1.getArray();
                double[][] arr_x = new double[m1.getRow()][m1.getColoumn()];
                for(int i = 0;i<m1.getRow();i++){
                    for(int j = 0;j<m1.getColoumn();j++){
                        if(i==j){
                            arr_x[i][j] = arr2[i];
                        }
                        else{
                            arr_x[i][j] = 0;
                        }
                    }
                }
                for(int i = 0;i<this.getRow();i++){
                    for(int j = 0;j<m1.getColoumn();j++) {
                        for(int r = 0;r<m1.getRow();r++){
                            arr3[i][j] += arr1[i][r]*arr_x[r][j];
                        }
                    }
                }
            }
            else{
                double[][] arr2 = m1.getArr();
                for(int i = 0;i<this.getRow();i++){
                    for(int j = 0;j<m1.getColoumn();j++) {
                        for(int r = 0;r<m1.getRow();r++){
                            arr3[i][j] += arr1[i][r]*arr2[r][j];
                        }
                    }
                }
            }
            return arr3;
        }
        else{
            System.out.println("Matrices cannot be multiplied");
            return null;
        }
    }
    ArrayList eigenvalue(){
        if(this.getRow()==this.getColoumn()){
            boolean flag1 = true;
            boolean flag2 = true;
            boolean flag3 = true;
            boolean flag4 = true;
            boolean flag5 = true;
            ArrayList<Double> arr1 = new ArrayList();
            for(int i = 0;i<this.get_Matrix_type().size();i++){
                if(this.get_Matrix_type().get(i).equals("Diagonal Matrix")){
                    flag1 = false;
                }
                if(this.get_Matrix_type().get(i).equals("Scalar Matrix")){
                    flag2 = false;
                }
                if(this.get_Matrix_type().get(i).equals("Identity Matrix")){
                    flag3 = false;
                }
                if(this.get_Matrix_type().get(i).equals("Ones Matrix")){
                    flag4 = false;
                }
                if(this.get_Matrix_type().get(i).equals("Null Matrix")){
                    flag5 = false;
                }
            }
            if(!flag5) {
                arr1.add(0.0);
                return arr1;
            }
            if(!flag4){
                arr1.add(0.0);
                arr1.add(2.0);
                return arr1;
            }
            if(!flag3){
                arr1.add(1.0);
                return arr1;
            }
            if(!flag2){
                arr1.add(get_intArr());
                return arr1;
            }
            if(!flag1){
                double c1 = getArray()[0];
                double c2 = getArray()[1];
                double D = Math.pow((c1+c2),2)-4*(c1*c2);
                double lambda1 = ((c1+c2) + Math.sqrt(D))/2;
                double lambda2 = ((c1+c2) - Math.sqrt(D))/2;
                arr1.add(lambda1);
                arr1.add(lambda2);
                return arr1;
            }
            else{
                double c1 = getArr()[0][0];
                double c2 = getArr()[1][1];
                double c3 = getArr()[0][1];
                double c4 = getArr()[1][0];
                double D = Math.pow((c1+c2),2)-4*(c1*c2-c3*c4);
                double lambda1 = ((c1+c2) + Math.sqrt(D))/2;
                double lambda2 = ((c1+c2) - Math.sqrt(D))/2;
                arr1.add(lambda1);
                arr1.add(lambda2);
                return arr1;
            }
        }
        System.out.println("Cannot be acheived");
        return null;

    }
    double[][] eigenvector(){
        if(this.getRow()==this.getColoumn()){
            boolean flag1 = true;
            boolean flag2 = true;
            boolean flag3 = true;
            boolean flag4 = true;
            boolean flag5 = true;
            double[][] D = new double[2][1];
            for(int i = 0;i<this.get_Matrix_type().size();i++){
                if(this.get_Matrix_type().get(i).equals("Diagonal Matrix")){
                    flag1 = false;
                }
                if(this.get_Matrix_type().get(i).equals("Scalar Matrix")){
                    flag2 = false;
                }
                if(this.get_Matrix_type().get(i).equals("Identity Matrix")){
                    flag3 = false;
                }
                if(this.get_Matrix_type().get(i).equals("Ones Matrix")){
                    flag4 = false;
                }
                if(this.get_Matrix_type().get(i).equals("Null Matrix")){
                    flag5 = false;
                }
            }
            if(!flag5) {
                D[0][0] = 0.0;
                D[1][0] = 0.0;
                return D;
            }
            if(!flag4){
                D[0][0] = 1.0;
                D[1][0] = -1.0;
                return D;
            }
            if(!flag3){
                D[0][0] = 0.0;
                D[1][0] = 0.0;
                return D;
            }
            if(!flag2){
                D[0][0] = 0.0;
                D[1][0] = 0.0;
                return D;
            }
            if(!flag1){
                D[0][0] = 0.0;
                D[1][0] = 0.0;
                return D;
            }
            else{
                double c1 = getArr()[0][0];
                double c2 = getArr()[1][1];
                double c3 = getArr()[0][1];
                double c4 = getArr()[1][0];
                double D1 = Math.pow((c1+c2),2)-4*(c1*c2-c3*c4);
                double lambda1 = ((c1+c2) + Math.sqrt(D1))/4;
                double lambda2 = ((c1+c2) - Math.sqrt(D1))/4;
                double[][] arr1 = getArr();
                for(int i = 0;i<arr1.length;i++){
                    for(int j = 0;j<arr1[i].length;j++){
                        if(i==j){
                            arr1[i][j] -= lambda1;
                        }
                    }
                }
                D[0][0] = arr1[0][1];
                D[1][0] = -arr1[0][0];
                return D;
            }
        }
        System.out.println("Cannot be acheived");
        return null;

    }
    double[][] mul_1(Matrix m1){
        double[][] arr1 = this.getArr();
        double[][] arr2 = m1.getArr();
        if(this.getRow()==m1.getRow() && this.getColoumn()==m1.getColoumn()){
            double[][] arr3 = new double[this.getRow()][this.getColoumn()];
            for(int i = 0;i<this.getRow();i++){
                for(int j =0;j<this.getColoumn();j++){
                    arr3[i][j] = arr1[i][j]*arr2[i][j];
                }
            }
            return arr3;
        }
        System.out.println("Cannot be multiplied");
        return null;
    }
    double[][] div_1(Matrix m1){
        double[][] arr1 = this.getArr();
        double[][] arr2 = m1.getArr();
        if(this.getRow()==m1.getRow() && this.getColoumn()==m1.getColoumn()){
            double[][] arr3 = new double[this.getRow()][this.getColoumn()];
            for(int i = 0;i<this.getRow();i++){
                for(int j =0;j<this.getColoumn();j++){
                    arr3[i][j] = arr1[i][j]/arr2[i][j];
                }
            }
            return arr3;
        }
        System.out.println("Cannot be divided");
        return null;
    }
    double[][] scale(Matrix m1){
        double d = this.get_intArr();
        boolean flag1 = true;
        boolean flag2 = true;
        boolean flag3 = true;
        boolean flag4 = true;
        boolean flag5 = true;
        double[][] arr3 = new double[m1.getRow()][m1.getColoumn()];
        for(int i = 0;i<m1.get_Matrix_type().size();i++){
            if(m1.get_Matrix_type().get(i).equals("Diagonal Matrix")){
                flag1 = false;
            }
            if(m1.get_Matrix_type().get(i).equals("Scalar Matrix")){
                flag2 = false;
            }
            if(m1.get_Matrix_type().get(i).equals("Identity Matrix")){
                flag3 = false;
            }
            if(m1.get_Matrix_type().get(i).equals("Ones Matrix")){
                flag4 = false;
            }
            if(m1.get_Matrix_type().get(i).equals("Null Matrix")){
                flag5 = false;
            }
        }
        if(!flag5){
            for(int i = 0;i<m1.getRow();i++){
                for(int j = 0;j<m1.getColoumn();j++){
                    arr3[i][j] = 0;
                }
            }
        }
        else if(!flag4){
            for(int i = 0;i<m1.getRow();i++){
                for(int j = 0;j<m1.getColoumn();j++){
                    arr3[i][j] = d;
                }
            }
        }
        else if(!flag3){
            for(int i = 0;i<m1.getRow();i++){
                for(int j = 0;j<m1.getColoumn();j++){
                    if(i==j){
                        arr3[i][j] = d;
                    }
                    else{
                        arr3[i][j] = 0;
                    }
                }
            }
        }
        else if(!flag2){
            double d1 = m1.get_intArr();
            for(int i = 0;i<m1.getRow();i++){
                for(int j = 0;j<m1.getColoumn();j++){
                    if(i==j){
                        arr3[i][j] = d*d1;
                    }
                    else{
                        arr3[i][j] = 0;
                    }
                }
            }
        }
        else if(!flag1){
            double[] d1 = m1.getArray();
            for(int i = 0;i<m1.getRow();i++){
                for(int j = 0;j<m1.getColoumn();j++){
                    if(i==j){
                        arr3[i][j] = d*d1[i];
                    }
                    else{
                        arr3[i][j] = 0;
                    }
                }
            }
        }
        else{
            double[][] d1 = m1.getArr();
            for(int i = 0;i<m1.getRow();i++){
                for(int j = 0;j<m1.getColoumn();j++){
                    arr3[i][j] = d*d1[i][j];
                }
            }
        }
        return arr3;
    }
}
class Rectangular_Matrix extends Matrix{
    public Rectangular_Matrix(int row, int coloumn, double[][] arr, String name) {
        super(row, coloumn, arr, name);
        super.setMatrix_type("Rectangular Matrix");
    }
    public int getRow(){
        return super.getRow();
    }
    public int getColoumn(){
        return super.getColoumn();
    }
    double[][] getArr(){
        return super.getArr();
    }
    public String getName(){
        return super.getName();
    }
    public ArrayList get_Matrix_type(){
        return super.get_Matrix_type();
    }
    public void get_Row_mean(){
        super.get_Row_mean();
    }
    public void get_Coloumn_mean(){
        super.get_Coloumn_mean();
    }
    public double[][] transpose_1(){
        return super.transpose_1();
    }
    public void Total_mean(){
        super.Total_mean();
    }
    double[][] add(Matrix m1){
        return super.add(m1);
    }
    double[][] sub(Matrix m1){
        return super.sub(m1);
    }
    double[][] mul(Matrix m1){
        return super.mul(m1);
    }
    double[][] mul_1(Matrix m1){
        return super.mul_1(m1);
    }
    double[][] div_1(Matrix m1){return super.div_1(m1);}
}
class Square_Matrix extends Matrix{
    public Square_Matrix(int row, int coloumn, double[][] arr, String name) {
        super(row, coloumn, arr, name);
        super.setMatrix_type("Square Matrix");
    }
    public int getRow(){
        return super.getRow();
    }
    public int getColoumn(){
        return super.getColoumn();
    }
    public ArrayList get_Matrix_type(){
        return super.get_Matrix_type();
    }
    public void get_Row_mean(){
        super.get_Row_mean();
    }
    public void get_Coloumn_mean(){
        super.get_Coloumn_mean();
    }
    public double[][] transpose_1(){
        return super.transpose_1();
    }
    public void Total_mean(){
        super.Total_mean();
    }
    double[][] compute_transpose_addition(){
        return super.compute_transpose_addition();
    }
    double[][] adj_2(){
        return super.adj_2();
    }
    double[][] adj_3(){
        return super.adj_3();
    }
    double determinant(){
        return super.determinant();
    }
    double[][] inverse_2(){
        return super.inverse_2();
    }
    double[][] add(Matrix m1){
        return super.add(m1);
    }
    double[][] sub(Matrix m1){
        return super.sub(m1);
    }
    double[][] mul(Matrix m1){
        return super.mul(m1);
    }
    double[][] mul_1(Matrix m1){
        return super.mul_1(m1);
    }
    double[][] div_1(Matrix m1){return super.div_1(m1);}
    ArrayList eigenvalue(){
        return super.eigenvalue();
    }
    double[][] eigenvector(){
        return super.eigenvector();
    }
}
class Row_Matrix extends Matrix{
    public Row_Matrix(int row, int coloumn, double[] arr, String name) {
        super(row, coloumn, arr, name);
        super.setMatrix_type("Row Matrix");
        super.setMatrix_type("Rectangular Matrix");
    }
    public int getRow(){
        return super.getRow();
    }
    public int getColoumn(){
        return super.getColoumn();
    }
    double[] getArray(){
        return super.getArray();
    }
    public ArrayList get_Matrix_type(){
        return super.get_Matrix_type();
    }
    public String getName(){
        return super.getName();
    }
    @Override
    public void get_Row_mean(){
        System.out.print("Mean of row1: ");
        double mean = 0;
        for(int i = 0;i< getColoumn();i++){
            mean += getArray()[i];
        }
        System.out.print(mean/getColoumn());
        System.out.println();
    }
    @Override
    public void get_Coloumn_mean(){
        for(int i = 0;i< super.getArray().length;i++){
            System.out.print("Mean of coloumn"+(i+1)+": ");
            System.out.print(super.getArray()[i]/getRow());
            System.out.println();
        }
    }
    @Override
    public double[][] transpose_1(){
        double[][] tran = new double[getColoumn()][getRow()];
        for(int i = 0;i<tran.length;i++){
            for(int j = 0;j<tran[i].length;j++){
                tran[i][j]= getArray()[i];
            }
        }
        return tran;
    }
    @Override
    public void Total_mean(){
        System.out.print("Mean: ");
        double mean = 0;
        for(int i = 0;i< super.getArray().length;i++){
            mean += super.getArray()[i];
        }
        System.out.println(mean/(getColoumn()*getRow()));
    }
    @Override
    double[][] add(Matrix m1){
        if(this.getRow()==m1.getRow() && this.getColoumn()==m1.getColoumn()){
            double[][] arr3 = new double[this.getRow()][this.getColoumn()];
            double[] d = this.getArray();
            double[] d1 = m1.getArray();
            for(int i = 0;i<arr3.length;i++){
                for(int j = 0;j<arr3[i].length;j++){
                    arr3[i][j] = d[j]+d1[j];
                }
            }
            return arr3;
        }
        else{
            System.out.println("These matrices cannot be added");
            return null;
        }
    }
    @Override
    double[][] sub(Matrix m1){
        if(this.getRow()==m1.getRow() && this.getColoumn()==m1.getColoumn()){
            double[][] arr3 = new double[this.getRow()][this.getColoumn()];
            for(int i = 0;i<arr3.length;i++){
                for(int j = 0;j<arr3[i].length;j++){
                    arr3[i][j] = this.getArray()[j]-m1.getArray()[j];
                }
            }
            return arr3;
        }
        else{
            System.out.println("These matrices cannot be subtracted");
            return null;
        }
    }
    @Override
    double[][] mul(Matrix m1){
        if(this.getColoumn()==m1.getRow()){
            boolean flag1 = true;
            boolean flag2 = true;
            boolean flag3 = true;
            boolean flag4 = true;
            boolean flag5 = true;
            for(int i = 0;i<m1.get_Matrix_type().size();i++){
                if(m1.get_Matrix_type().get(i).equals("Diagonal Matrix")){
                    flag1 = false;
                }
                if(m1.get_Matrix_type().get(i).equals("Scalar Matrix")){
                    flag2 = false;
                }
                if(m1.get_Matrix_type().get(i).equals("Identity Matrix")){
                    flag3 = false;
                }
                if(m1.get_Matrix_type().get(i).equals("Ones Matrix")){
                    flag4 = false;
                }
                if(m1.get_Matrix_type().get(i).equals("Null Matrix")){
                    flag5 = false;
                }
            }
            double[][] arr3 = new double[this.getRow()][m1.getColoumn()];
            if(!flag5){
                for(int i = 0;i<this.getRow();i++){
                    for(int j = 0;j<m1.getColoumn();j++){
                        arr3[i][j] = 0;
                    }
                }
            }
            else if(!flag4){
                for(int i = 0;i<this.getRow();i++){
                    for(int j = 0;j<m1.getColoumn();j++){
                        for(int r = 0;r<getColoumn();r++)
                            arr3[i][j] += this.getArray()[r];
                    }
                }
            }
            else if(!flag3){
                arr3[0] = this.getArray();
            }
            else if(!flag2){
                double arr2 = m1.get_intArr();
                for(int i = 0;i<this.getRow();i++){
                    for(int j = 0;j<m1.getColoumn();j++){
                        arr3[i][j] = this.getArray()[j]*arr2;
                    }
                }
            }
            else if(!flag1){
                double[] arr2 = m1.getArray();
                for(int i = 0;i<this.getRow();i++){
                    for(int j = 0;j<m1.getColoumn();j++){
                        arr3[i][j] = this.getArray()[j]*arr2[j];
                    }
                }
            }
            else{
                if(m1.getColoumn()!=1){
                    double[][] arr2 = m1.getArr();
                    for(int i = 0;i<this.getRow();i++){
                        for(int j = 0;j<m1.getColoumn();j++){
                            for(int r = 0;r<getColoumn();r++)
                                arr3[i][j] += this.getArray()[r]*arr2[r][j];
                        }
                    }
                }
                else{
                    double[] arr2 = m1.getArray();
                    for(int i = 0;i<getRow();i++){
                        for(int j = 0;j<getColoumn();j++){
                            arr3[i][i] += this.getArray()[j]*arr2[j];
                        }
                    }
                }
            }
            return arr3;
        }
        else{
            System.out.println("These matrices cannot be multiplied");
            return null;
        }
    }

    @Override
    double[][] mul_1(Matrix m1){
        if(this.getRow()==m1.getRow() && this.getColoumn()==m1.getColoumn()){
            double[][] arr3 = new double[this.getRow()][this.getColoumn()];
            double[] arr2 = m1.getArray();
            double[] arr1 = this.getArray();
            for(int i = 0;i<this.getRow();i++) {
                for (int j = 0; j < this.getColoumn(); j++) {
                    arr3[i][j] = arr1[j]*arr2[j];
                }
            }
            return arr3;
        }
        else{
            System.out.println("Cannot be multiplied");
            return null;
        }
    }
    @Override
    double[][] div_1(Matrix m1){
        if(this.getRow()==m1.getRow() && this.getColoumn()==m1.getColoumn()){

            double[][] arr3 = new double[this.getRow()][this.getColoumn()];
            double[] arr2 = m1.getArray();
            double[] arr1 = this.getArray();
            boolean pres = true;
            for(int i = 0;i<this.getRow();i++){
                for(int j =0;j<this.getColoumn();j++){
                    if(arr2[j]!=0) {
                        arr3[i][j] = arr1[j]/arr2[j];
                    }
                    else{
                        pres = false;
                    }
                }
            }
            if(!pres) {
                System.out.println("Division by zero not possible: ERROR");
                return null;
            }
            return arr3;
        }
        System.out.println("Cannot be divided");
        return null;
    }

}
class Coloumn_Matrix extends Matrix{

    public Coloumn_Matrix(int row, int coloumn, double[] arr, String name) {
        super(row, coloumn, arr, name);
        super.setMatrix_type("Coloumn Matrix");
        super.setMatrix_type("Rectangular Matrix");
    }
    public int getRow(){
        return super.getRow();
    }
    public int getColoumn(){
        return super.getColoumn();
    }
    double[] getArray(){
        return super.getArray();
    }
    public ArrayList get_Matrix_type(){
        return super.get_Matrix_type();
    }
    public String getName(){
        return super.getName();
    }
    @Override
    public void get_Row_mean(){
        for(int i = 0;i< super.getArray().length;i++){
            System.out.print("Mean of row"+(i+1)+": ");
            System.out.print(super.getArray()[i]/getColoumn());
            System.out.println();
        }
    }
    @Override
    public void get_Coloumn_mean(){
        System.out.print("Mean of coloumn1: ");
        double mean = 0;
        for(int i = 0;i< getRow();i++){
            mean += getArray()[i];
        }
        System.out.print(mean/getRow());
        System.out.println();
    }
    @Override
    public double[][] transpose_1(){
        double[][] tran = new double[getColoumn()][getRow()];
        for(int i = 0;i<tran.length;i++){
            for(int j = 0;j<tran[i].length;j++){
                tran[i][j]= getArray()[j];
            }
        }
        return tran;
    }
    @Override
    public void Total_mean(){
        System.out.print("Mean: ");
        double mean = 0;
        for(int i = 0;i< super.getArray().length;i++){
            mean += super.getArray()[i];
        }
        System.out.println(mean/(getColoumn()*getRow()));
    }
    @Override
    double[][] add(Matrix m1){
        if(this.getRow()==m1.getRow() && this.getColoumn()==m1.getColoumn()){
            double[][] arr3 = new double[this.getRow()][this.getColoumn()];
            double[] d = this.getArray();
            double[] d1 = m1.getArray();
            for(int i = 0;i<getRow();i++){
                for(int j = 0;j<getColoumn();j++){
                    arr3[i][j] = d[i]+d1[i];
                }
            }
            return arr3;
        }
        else{
            System.out.println("These matrices cannot be added");
            return null;
        }
    }
    @Override
    double[][] sub(Matrix m1){
        if(this.getRow()==m1.getRow() && this.getColoumn()==m1.getColoumn()){
            double[][] arr3 = new double[this.getRow()][this.getColoumn()];
            double[] d = this.getArray();
            double[] d1 = m1.getArray();
            for(int i = 0;i<getRow();i++){
                for(int j = 0;j<getColoumn();j++){
                    arr3[i][j] = d[i]-d1[i];
                }
            }
            return arr3;
        }
        else{
            System.out.println("These matrices cannot be subtracted");
            return null;
        }
    }
    @Override
    double[][] mul(Matrix m1){
        if(this.getColoumn()==m1.getRow()){
            boolean flag4 = true;
            boolean flag5 = true;

            for(int i = 0;i<m1.get_Matrix_type().size();i++){
                if(m1.get_Matrix_type().get(i).equals("Ones Matrix")){
                    flag4 = false;
                }
                if(m1.get_Matrix_type().get(i).equals("Null Matrix")){
                    flag5 = false;
                }
            }
            double[][] arr3 = new double[this.getRow()][m1.getColoumn()];
            if(!flag5){
                for(int i = 0;i<this.getRow();i++){
                    for(int j = 0;j<m1.getColoumn();j++){
                        arr3[i][j] = 0;
                    }
                }
            }
            else if(!flag4){
                for(int i = 0;i<arr3.length;i++){
                    for(int j = 0;j<arr3[i].length;j++){
                        arr3[i][j] += this.getArray()[i];
                    }
                }
            }

            else{
                double[] arr2 = m1.getArray();
                for(int i = 0;i<getRow();i++){
                    for(int j = 0;j<m1.getColoumn();j++){
                        arr3[i][j] += this.getArray()[i]*arr2[j];
                    }
                }
            }

            return arr3;
        }
        else{
            System.out.println("These matrices cannot be multiplied");
            return null;
        }
    }

    @Override
    double[][] mul_1(Matrix m1){
        if(this.getRow()==m1.getRow() && this.getColoumn()==m1.getColoumn()){
            double[][] arr3 = new double[this.getRow()][this.getColoumn()];
            double[] d = this.getArray();
            double[] d1 = m1.getArray();
            for(int i = 0;i<getRow();i++){
                for(int j = 0;j<getColoumn();j++){
                    arr3[i][j] = d[i]*d1[i];
                }
            }
            return arr3;
        }
        else{
            System.out.println("Cannot be multiplied");
            return null;
        }
    }
    @Override
    double[][] div_1(Matrix m1){
        if(this.getRow()==m1.getRow() && this.getColoumn()==m1.getColoumn()){

            double[][] arr3 = new double[this.getRow()][this.getColoumn()];
            double[] arr2 = m1.getArray();
            double[] arr1 = this.getArray();
            boolean pres = true;
            for(int i = 0;i<this.getRow();i++){
                for(int j = 0;j<this.getColoumn();j++){
                    if(arr2[i]!=0) {
                        arr3[i][j] = arr1[i]/arr2[i];
                    }
                    else{
                        pres = false;
                    }
                }
            }
            if(!pres) {
                System.out.println("Division by zero not possible: ERROR");
                return null;
            }
            return arr3;
        }
        System.out.println("Cannot be divided");
        return null;
    }

}
class Singleton_Matrix extends Matrix{
    public Singleton_Matrix(int row, int coloumn, double arr, String name) {
        super(row, coloumn, arr, name);
        super.setMatrix_type("Singleton Matrix");
        super.setMatrix_type("Scalar Matrix");
        super.setMatrix_type("Symmetric Matrix");
        super.setMatrix_type("Diagonal Matrix");
        super.setMatrix_type("Square Matrix");
        super.setMatrix_type("Coloumn Matrix");
        super.setMatrix_type("Row Matrix");
    }
    double get_intArr(){
        return super.get_intArr();
    }
    public int getRow(){
        return super.getRow();
    }
    public int getColoumn(){
        return super.getColoumn();
    }
    public ArrayList get_Matrix_type(){
        return super.get_Matrix_type();
    }
    @Override
    public void get_Row_mean(){
        System.out.print("Mean of row1: ");
        System.out.print(get_intArr());
        System.out.println();
    }
    @Override
    public void get_Coloumn_mean(){

        System.out.print("Mean of coloumn1: ");
        System.out.print(get_intArr());
        System.out.println();

    }
    @Override
    public double[][] transpose_1(){
        double[][] d = {{get_intArr()}};
        return d;
    }
    @Override
    public void Total_mean(){
        System.out.print("Mean: " + get_intArr());
    }
    @Override
    public double[][] compute_transpose_addition(){
        double[][] d = {{get_intArr()+get_intArr()}};
        return d;
    }
    double[][] inverse_2(){
        return super.inverse_2();
    }
    @Override
    double[][] add(Matrix m1){
        if(this.getRow()==m1.getRow() && this.getColoumn()==m1.getColoumn()){
            double res = this.get_intArr()+m1.get_intArr();
            double[][] arr3 = {{res}};
            return arr3;
        }
        else{
            System.out.println("These matrices cannot be added");
            return null;
        }
    }
    @Override
    double[][] sub(Matrix m1){
        if(this.getRow()==m1.getRow() && this.getColoumn()==m1.getColoumn()){
            double res = this.get_intArr()-m1.get_intArr();
            double[][] arr3 = {{res}};
            return arr3;
        }
        else{
            System.out.println("These matrices cannot be subtracted");
            return null;
        }
    }
    @Override
    double[][] mul(Matrix m1){
        if(this.getColoumn()==m1.getRow()){
            double[][] arr3 = new double[this.getRow()][m1.getColoumn()];
            double[] arr2 = m1.getArray();
            for(int i = 0;i<this.getRow();i++){
                for(int j = 0;j<m1.getColoumn();j++){
                    arr3[i][j] = this.get_intArr()*arr2[j];
                }
            }
            return arr3;
        }
        else{
            System.out.println("These matrices cannot be multiplied");
            return null;
        }
    }

    @Override
    double[][] mul_1(Matrix m1){
        if(this.getRow()==m1.getRow() && this.getColoumn()==m1.getColoumn()){
            double[][] arr3 = new double[this.getRow()][this.getColoumn()];
            for(int i = 0;i<this.getRow();i++) {
                for (int j = 0; j < this.getColoumn(); j++) {
                    arr3[i][j] = this.get_intArr()*m1.get_intArr();
                }
            }
            return arr3;
        }
        else{
            System.out.println("Cannot be multiplied");
            return null;
        }
    }
    @Override
    double[][] div_1(Matrix m1){
        if(this.getRow()==m1.getRow() && this.getColoumn()==m1.getColoumn()){

            double[][] arr3 = new double[this.getRow()][this.getColoumn()];
            double arr2 = m1.get_intArr();
            boolean pres = true;
            for(int i = 0;i<this.getRow();i++){
                for(int j =0;j<this.getColoumn();j++){
                    if(arr2!=0) {
                        arr3[i][j] = this.get_intArr()/arr2;
                    }
                    else{
                        pres = false;
                    }
                }
            }
            if(!pres) {
                System.out.println("Division by zero not possible: ERROR");
                return null;
            }
            return arr3;
        }
        System.out.println("Cannot be divided");
        return null;
    }

    double[][] scale(Matrix m1){
        return super.scale(m1);
    }
}
class Null_Matrix extends Matrix{
    public Null_Matrix(int row, int coloumn, String name) {
        super(row, coloumn, name);
        super.setMatrix_type("Null Matrix");
        if(row==coloumn){
            if(row==1){
                super.setMatrix_type("Symmetric Matrix");
                super.setMatrix_type("Skew Symmetric Matrix");
                super.setMatrix_type("Singleton Matrix");
                super.setMatrix_type("Square Matrix");
                super.setMatrix_type("Singular Matrix");
                super.setMatrix_type("Coloumn Matrix");
                super.setMatrix_type("Row Matrix");
            }
            else{
                super.setMatrix_type("Symmetric Matrix");
                super.setMatrix_type("Skew Symmetric Matrix");
                super.setMatrix_type("Singular Matrix");
                super.setMatrix_type("Square Matrix");
            }
        }
        else{
            if(row==1){
                super.setMatrix_type("Row Matrix");
            }
            if(coloumn==1){
                super.setMatrix_type("Coloumn Matrix");
            }
            super.setMatrix_type("Rectangular Matrix");
        }
    }
    public int getRow(){
        return super.getRow();
    }
    public int getColoumn(){
        return super.getColoumn();
    }
    public ArrayList get_Matrix_type(){
        return super.get_Matrix_type();
    }
    @Override
    public void get_Row_mean(){
        System.out.println(0);
    }
    @Override
    public void get_Coloumn_mean(){
        System.out.println(0);
    }
    @Override
    public double[][] transpose_1(){
        double[][] d = new double[this.getColoumn()][this.getRow()];
        for(int i = 0;i<this.getRow();i++){
            for(int j = 0;j<this.getColoumn();j++){
                d[i][j] =0;
            }
        }
        return d;
    }
    @Override
    public void Total_mean(){
        System.out.println(0);
    }
    @Override
    double[][] compute_transpose_addition(){
        double[][] arr3 = new double[getRow()][getColoumn()];
        for(int i = 0;i<getRow();i++){
            for(int j = 0;j<getColoumn();j++){
                arr3[i][j] = 0;
            }
        }
        return arr3;
    }
    @Override
    double[][] adj_2(){
        double[][] adj = new double[2][2];
        adj[0][0] = 0;
        adj[1][1] = 0;
        adj[0][1] = 0;
        adj[1][0] = 0;
        return adj;
    }
    @Override
    double[][] adj_3(){
        double[][] adj = new double[3][3];
        double det1 = 0;
        double det2 = 0;
        double det3 = 0;
        double det4 = 0;
        double det5 = 0;
        double det6 = 0;
        double det7 = 0;
        double det8 = 0;
        double det9 = 0;
        adj[0][0] = det1;
        adj[0][1] = det2;
        adj[0][2] = det3;
        adj[1][0] = det4;
        adj[1][1] = det5;
        adj[1][2] = det6;
        adj[2][0] = det7;
        adj[2][1] = det8;
        adj[2][2] = det9;
        return adj;
    }
    @Override
    double determinant(){
        return 0;
    }
    double[][] inverse_2(){
        return super.inverse_2();
    }
    @Override
    double[][] add(Matrix m1){
        if(this.getRow()==m1.getRow() && this.getColoumn()==m1.getColoumn()){
            boolean flag1 = true;
            boolean flag2 = true;
            boolean flag3 = true;
            boolean flag4 = true;
            boolean flag5 = true;
            for(int i = 0;i<m1.get_Matrix_type().size();i++){
                if(m1.get_Matrix_type().get(i).equals("Diagonal Matrix")){
                    flag1 = false;
                }
                if(m1.get_Matrix_type().get(i).equals("Scalar Matrix")){
                    flag2 = false;
                }
                if(m1.get_Matrix_type().get(i).equals("Identity Matrix")){
                    flag3 = false;
                }
                if(m1.get_Matrix_type().get(i).equals("Ones Matrix")){
                    flag4 = false;
                }
                if(m1.get_Matrix_type().get(i).equals("Null Matrix")){
                    flag5 = false;
                }
            }
            double[][] arr3 = new double[this.getRow()][this.getColoumn()];
            if(!flag5){
                for(int i = 0;i<this.getRow();i++){
                    for(int j = 0;j<this.getColoumn();j++){
                        arr3[i][j] = 0;
                    }
                }
            }
            else if(!flag4){
                for(int i = 0;i<this.getRow();i++){
                    for(int j = 0;j<this.getColoumn();j++){
                        arr3[i][j] = 1;
                    }
                }
            }
            else if(!flag3){
                for(int i = 0;i<this.getRow();i++){
                    for(int j = 0;j<this.getColoumn();j++){
                        if(i==j){
                            arr3[i][j] = 1;
                        }
                        else{
                            arr3[i][j] = 0;
                        }
                    }
                }
            }
            else if(!flag2){
                double arr2 = m1.get_intArr();
                for(int i = 0;i<this.getRow();i++){
                    for(int j = 0;j<this.getColoumn();j++){
                        if(i==j){
                            arr3[i][j] = arr2;
                        }
                        else{
                            arr3[i][j] = 0;
                        }
                    }
                }
            }
            else if(!flag1){
                double[] arr2 = m1.getArray();
                for(int i = 0;i<this.getRow();i++){
                    for(int j = 0;j<this.getColoumn();j++){
                        if(i==j){
                            arr3[i][j] = arr2[i];
                        }
                        else{
                            arr3[i][j] = 0;
                        }
                    }
                }
            }
            else{
                double[][] arr2 = m1.getArr();
                arr3 = arr2;
            }
            return arr3;
        }
        else{
            System.out.println("These matrices cannot be added");
            return null;
        }
    }
    @Override
    double[][] sub(Matrix m1){
        if(this.getRow()==m1.getRow() && this.getColoumn()==m1.getColoumn()){
            boolean flag1 = true;
            boolean flag2 = true;
            boolean flag3 = true;
            boolean flag4 = true;
            boolean flag5 = true;
            for(int i = 0;i<m1.get_Matrix_type().size();i++){
                if(m1.get_Matrix_type().get(i).equals("Diagonal Matrix")){
                    flag1 = false;
                }
                if(m1.get_Matrix_type().get(i).equals("Scalar Matrix")){
                    flag2 = false;
                }
                if(m1.get_Matrix_type().get(i).equals("Identity Matrix")){
                    flag3 = false;
                }
                if(m1.get_Matrix_type().get(i).equals("Ones Matrix")){
                    flag4 = false;
                }
                if(m1.get_Matrix_type().get(i).equals("Null Matrix")){
                    flag5 = false;
                }
            }
            double[][] arr3 = new double[this.getRow()][this.getColoumn()];
            if(!flag5){
                for(int i = 0;i<this.getRow();i++){
                    for(int j = 0;j<this.getColoumn();j++){
                        arr3[i][j] = 0;
                    }
                }
            }
            else if(!flag4){
                for(int i = 0;i<this.getRow();i++){
                    for(int j = 0;j<this.getColoumn();j++){
                        arr3[i][j] = -1;
                    }
                }
            }
            else if(!flag3){
                for(int i = 0;i<this.getRow();i++){
                    for(int j = 0;j<this.getColoumn();j++){
                        if(i==j){
                            arr3[i][j] = -1;
                        }
                        else{
                            arr3[i][j] = 0;
                        }
                    }
                }
            }
            else if(!flag2){
                double arr2 = m1.get_intArr();
                for(int i = 0;i<this.getRow();i++){
                    for(int j = 0;j<this.getColoumn();j++){
                        if(i==j){
                            arr3[i][j] = -arr2;
                        }
                        else{
                            arr3[i][j] = 0;
                        }
                    }
                }
            }
            else if(!flag1){
                double[] arr2 = m1.getArray();
                for(int i = 0;i<this.getRow();i++){
                    for(int j = 0;j<this.getColoumn();j++){
                        if(i==j){
                            arr3[i][j] = -arr2[i];
                        }
                        else{
                            arr3[i][j] = 0;
                        }
                    }
                }
            }
            else{
                double[][] arr2 = m1.getArr();
                for(int i = 0;i<this.getRow();i++){
                    for(int j = 0;j<this.getColoumn();j++){
                        arr3[i][j] = -arr2[i][j];
                    }
                }
            }
            return arr3;
        }
        else{
            System.out.println("These matrices cannot be subtracted");
            return null;
        }
    }
    @Override
    double[][] mul(Matrix m1){
        if(this.getColoumn()==m1.getRow()){

            double[][] arr3 = new double[this.getRow()][m1.getColoumn()];
            for(int i = 0;i<this.getRow();i++){
                for(int j = 0;j<m1.getColoumn();j++){
                    arr3[i][j] = 0;
                }
            }
            return arr3;
        }
        else{
            System.out.println("These matrices cannot be multiplied");
            return null;
        }
    }

    @Override
    double[][] mul_1(Matrix m1){
        if(this.getRow()==m1.getRow() && this.getColoumn()==m1.getColoumn()){
            double[][] arr3 = new double[this.getRow()][this.getColoumn()];
            for(int i = 0;i<this.getRow();i++) {
                for (int j = 0; j < this.getColoumn(); j++) {
                    arr3[i][j] = 0;
                }
            }
            return arr3;
        }
        else{
            System.out.println("Cannot be multiplied");
            return null;
        }
    }
    @Override
    double[][] div_1(Matrix m1){
        if(this.getRow()==m1.getRow() && this.getColoumn()==m1.getColoumn()){
            boolean flag1 = true;
            boolean flag2 = true;
            boolean flag3 = true;
            boolean flag4 = true;
            boolean flag5 = true;
            for(int i = 0;i<m1.get_Matrix_type().size();i++){
                if(m1.get_Matrix_type().get(i).equals("Diagonal Matrix")){
                    flag1 = false;
                }
            }
            for(int i = 0;i<m1.get_Matrix_type().size();i++){
                if(m1.get_Matrix_type().get(i).equals("Scalar Matrix")){
                    flag2 = false;
                }
            }
            for(int i = 0;i<m1.get_Matrix_type().size();i++){
                if(m1.get_Matrix_type().get(i).equals("Identity Matrix")){
                    flag3 = false;
                }
            }
            for(int i = 0;i<m1.get_Matrix_type().size();i++){
                if(m1.get_Matrix_type().get(i).equals("Ones Matrix")){
                    flag4 = false;
                }
            }
            for(int i = 0;i<m1.get_Matrix_type().size();i++){
                if(m1.get_Matrix_type().get(i).equals("Null Matrix")){
                    flag5 = false;
                }
            }
            double[][] arr3 = new double[this.getRow()][this.getColoumn()];
            if(!flag5){
                System.out.println("Division by zero not possible: ERROR");
            }
            else if(!flag4){
                for(int i = 0;i<this.getRow();i++){
                    for(int j =0;j<this.getColoumn();j++){
                        arr3[i][j] = 0;
                    }
                }
            }
            else if(!flag3){
                System.out.println("Division by zero not possible: ERROR");
            }
            else if(!flag2){
                System.out.println("Division by zero not possible: ERROR");
            }
            else if(!flag1){
                System.out.println("Division by zero not possible: ERROR");
            }
            else{
                double[][] arr2 = m1.getArr();
                boolean pres = true;
                for(int i = 0;i<this.getRow();i++){
                    for(int j =0;j<this.getColoumn();j++){
                        if(arr2[i][j]!=0) {
                            arr3[i][j] = 0;
                        }
                        else{
                            pres = false;
                        }
                    }
                }
                if(!pres) {
                    System.out.println("Division by zero not possible: ERROR");
                    return null;
                }
            }
            return arr3;
        }
        System.out.println("Cannot be divided");
        return null;
    }

    ArrayList eigenvalue(){
        return super.eigenvalue();
    }
    double[][] eigenvector(){
        return super.eigenvector();
    }
    @Override
    double[][] scale(Matrix m1){
        if(this.getRow()==this.getColoumn() && this.getRow()==1) {
            boolean flag1 = true;
            boolean flag2 = true;
            boolean flag3 = true;
            boolean flag4 = true;
            boolean flag5 = true;
            double[][] arr3 = new double[m1.getRow()][m1.getColoumn()];
            for(int i = 0;i<m1.getRow();i++){
                for(int j = 0;j<m1.getColoumn();j++){
                    arr3[i][j] = 0;
                }
            }
            return arr3;
        }
        System.out.println("Cannot use this as scaler");
        return null;
    }
}
class Ones_Matrix extends Matrix{
    public Ones_Matrix(int row, int coloumn, String name) {
        super(row, coloumn, name);
        super.setMatrix_type("Ones Matrix");
        if(row==coloumn){
            if(row==1){
                super.setMatrix_type("Symmetric Matrix");
                super.setMatrix_type("Identity Matrix");
                super.setMatrix_type("Singleton Matrix");
                super.setMatrix_type("Square Matrix");
                super.setMatrix_type("Scalar Matrix");
                super.setMatrix_type("Diagonal Matrix");
                super.setMatrix_type("Coloumn Matrix");
                super.setMatrix_type("Row Matrix");
            }
            else{
                super.setMatrix_type("Symmetric Matrix");
                super.setMatrix_type("Singular Matrix");
                super.setMatrix_type("Square Matrix");
            }
        }
        else{
            if(row==1){
                super.setMatrix_type("Row Matrix");
            }
            if(coloumn==1){
                super.setMatrix_type("Coloumn Matrix");
            }
            super.setMatrix_type("Rectangular Matrix");
        }
    }
    public int getRow(){
        return super.getRow();
    }
    public int getColoumn(){
        return super.getColoumn();
    }
    public ArrayList get_Matrix_type(){
        return super.get_Matrix_type();
    }
    @Override
    public void get_Row_mean(){
        System.out.println(1);
    }
    @Override
    public void get_Coloumn_mean(){
        System.out.println(1);
    }
    @Override
    public double[][] transpose_1(){
        double[][] d = new double[this.getColoumn()][this.getRow()];
        for(int i = 0;i<this.getRow();i++){
            for(int j = 0;j<this.getColoumn();j++){
                d[i][j] =1;
            }
        }
        return d;
    }
    @Override
    public void Total_mean(){
        System.out.println(1);
    }
    @Override
    double[][] compute_transpose_addition(){
        double[][] arr3 = new double[getRow()][getColoumn()];
        for(int i = 0;i<getRow();i++){
            for(int j = 0;j<getColoumn();j++){
                arr3[i][j] = 2;
            }
        }
        return arr3;
    }
    @Override
    double[][] adj_2(){
        double[][] adj = new double[2][2];
        adj[0][0] = 1;
        adj[1][1] = 1;
        adj[0][1] = -1;
        adj[1][0] = -1;
        return adj;
    }
    @Override
    double[][] adj_3(){
        double[][] adj = new double[3][3];
        double det1 = 0;
        double det2 = 0;
        double det3 = 0;
        double det4 = 0;
        double det5 = 0;
        double det6 = 0;
        double det7 = 0;
        double det8 = 0;
        double det9 = 0;
        adj[0][0] = det1;
        adj[0][1] = det2;
        adj[0][2] = det3;
        adj[1][0] = det4;
        adj[1][1] = det5;
        adj[1][2] = det6;
        adj[2][0] = det7;
        adj[2][1] = det8;
        adj[2][2] = det9;
        return adj;
    }
    @Override
    double determinant(){
        return 0;
    }
    double[][] inverse_2(){
        return super.inverse_2();
    }
    @Override
    double[][] add(Matrix m1){
        if(this.getRow()==m1.getRow() && this.getColoumn()==m1.getColoumn()){
            boolean flag1 = true;
            boolean flag2 = true;
            boolean flag3 = true;
            boolean flag4 = true;
            boolean flag5 = true;
            for(int i = 0;i<m1.get_Matrix_type().size();i++){
                if(m1.get_Matrix_type().get(i).equals("Diagonal Matrix")){
                    flag1 = false;
                }
                if(m1.get_Matrix_type().get(i).equals("Scalar Matrix")){
                    flag2 = false;
                }
                if(m1.get_Matrix_type().get(i).equals("Identity Matrix")){
                    flag3 = false;
                }
                if(m1.get_Matrix_type().get(i).equals("Ones Matrix")){
                    flag4 = false;
                }
                if(m1.get_Matrix_type().get(i).equals("Null Matrix")){
                    flag5 = false;
                }
            }
            double[][] arr3 = new double[this.getRow()][this.getColoumn()];
            if(!flag5){
                for(int i = 0;i<this.getRow();i++){
                    for(int j = 0;j<this.getColoumn();j++){
                        arr3[i][j] = 1;
                    }
                }
            }
            else if(!flag4){
                for(int i = 0;i<this.getRow();i++){
                    for(int j = 0;j<this.getColoumn();j++){
                        arr3[i][j] = 2;
                    }
                }
            }
            else if(!flag3){
                for(int i = 0;i<this.getRow();i++){
                    for(int j = 0;j<this.getColoumn();j++){
                        if(i==j){
                            arr3[i][j] = 1+1;
                        }
                        else{
                            arr3[i][j] = 1;
                        }
                    }
                }
            }
            else if(!flag2){
                double arr2 = m1.get_intArr();
                for(int i = 0;i<this.getRow();i++){
                    for(int j = 0;j<this.getColoumn();j++){
                        if(i==j){
                            arr3[i][j] = 1+arr2;
                        }
                        else{
                            arr3[i][j] = 1;
                        }
                    }
                }
            }
            else if(!flag1){
                double[] arr2 = m1.getArray();
                for(int i = 0;i<this.getRow();i++){
                    for(int j = 0;j<this.getColoumn();j++){
                        if(i==j){
                            arr3[i][j] = 1+arr2[i];
                        }
                        else{
                            arr3[i][j] = 1;
                        }
                    }
                }
            }
            else{
                double[][] arr2 = m1.getArr();
                for(int i = 0;i<this.getRow();i++){
                    for(int j = 0;j<this.getColoumn();j++){
                        arr3[i][j] = 1+arr2[i][j];
                    }
                }
            }
            return arr3;
        }
        else{
            System.out.println("These matrices cannot be added");
            return null;
        }
    }
    @Override
    double[][] sub(Matrix m1){
        if(this.getRow()==m1.getRow() && this.getColoumn()==m1.getColoumn()){
            boolean flag1 = true;
            boolean flag2 = true;
            boolean flag3 = true;
            boolean flag4 = true;
            boolean flag5 = true;
            for(int i = 0;i<m1.get_Matrix_type().size();i++){
                if(m1.get_Matrix_type().get(i).equals("Diagonal Matrix")){
                    flag1 = false;
                }
                if(m1.get_Matrix_type().get(i).equals("Scalar Matrix")){
                    flag2 = false;
                }
                if(m1.get_Matrix_type().get(i).equals("Identity Matrix")){
                    flag3 = false;
                }
                if(m1.get_Matrix_type().get(i).equals("Ones Matrix")){
                    flag4 = false;
                }
                if(m1.get_Matrix_type().get(i).equals("Null Matrix")){
                    flag5 = false;
                }
            }
            double[][] arr3 = new double[this.getRow()][this.getColoumn()];
            if(!flag5){
                for(int i = 0;i<this.getRow();i++){
                    for(int j = 0;j<this.getColoumn();j++){
                        arr3[i][j] = 1;
                    }
                }
            }
            else if(!flag4){
                for(int i = 0;i<this.getRow();i++){
                    for(int j = 0;j<this.getColoumn();j++){
                        arr3[i][j] = 0;
                    }
                }
            }
            else if(!flag3){
                for(int i = 0;i<this.getRow();i++){
                    for(int j = 0;j<this.getColoumn();j++){
                        if(i==j){
                            arr3[i][j] = 0;
                        }
                        else{
                            arr3[i][j] = 1;
                        }
                    }
                }
            }
            else if(!flag2){
                double arr2 = m1.get_intArr();
                for(int i = 0;i<this.getRow();i++){
                    for(int j = 0;j<this.getColoumn();j++){
                        if(i==j){
                            arr3[i][j] = 1-arr2;
                        }
                        else{
                            arr3[i][j] = 1;
                        }
                    }
                }
            }
            else if(!flag1){
                double[] arr2 = m1.getArray();
                for(int i = 0;i<this.getRow();i++){
                    for(int j = 0;j<this.getColoumn();j++){
                        if(i==j){
                            arr3[i][j] = 1-arr2[i];
                        }
                        else{
                            arr3[i][j] = 1;
                        }
                    }
                }
            }
            else{
                double[][] arr2 = m1.getArr();
                for(int i = 0;i<this.getRow();i++){
                    for(int j = 0;j<this.getColoumn();j++){
                        arr3[i][j] = 1-arr2[i][j];
                    }
                }
            }
            return arr3;
        }
        else{
            System.out.println("These matrices cannot be subtracted");
            return null;
        }
    }
    @Override
    double[][] mul(Matrix m1){
        if(this.getColoumn()==m1.getRow()){
            boolean flag1 = true;
            boolean flag2 = true;
            boolean flag3 = true;
            boolean flag4 = true;
            boolean flag5 = true;
            for(int i = 0;i<m1.get_Matrix_type().size();i++){
                if(m1.get_Matrix_type().get(i).equals("Diagonal Matrix")){
                    flag1 = false;
                }
                if(m1.get_Matrix_type().get(i).equals("Scalar Matrix")){
                    flag2 = false;
                }
                if(m1.get_Matrix_type().get(i).equals("Identity Matrix")){
                    flag3 = false;
                }
                if(m1.get_Matrix_type().get(i).equals("Ones Matrix")){
                    flag4 = false;
                }
                if(m1.get_Matrix_type().get(i).equals("Null Matrix")){
                    flag5 = false;
                }
            }
            double[][] arr3 = new double[this.getRow()][m1.getColoumn()];
            if(!flag5){
                for(int i = 0;i<this.getRow();i++){
                    for(int j = 0;j<m1.getColoumn();j++){
                        arr3[i][j] = 0;
                    }
                }
            }
            else if(!flag4){
                double[][] arr_x = new double[m1.getRow()][m1.getColoumn()];
                for(int i = 0;i<m1.getRow();i++){
                    for(int j = 0;j<m1.getColoumn();j++){
                        arr_x[i][j] = 1;
                    }
                }
                for(int i = 0;i<this.getRow();i++){
                    for(int j = 0;j<m1.getColoumn();j++) {
                        for(int r = 0;r<m1.getRow();r++){
                            arr3[i][j] += arr_x[r][j];
                        }
                    }
                }
            }
            else if(!flag3){
                for(int i = 0;i<this.getRow();i++){
                    for(int j = 0;j<m1.getColoumn();j++){
                        arr3[i][j] = 1;
                    }
                }
            }
            else if(!flag2){
                double arr2 = m1.get_intArr();
                for(int i = 0;i<this.getRow();i++){
                    for(int j = 0;j<m1.getColoumn();j++){
                        arr3[i][j] = arr2;
                    }
                }
            }
            else if(!flag1){
                double[] arr2 = m1.getArray();
                for(int i = 0;i<this.getRow();i++){
                    for(int j = 0;j<m1.getColoumn();j++){
                        for(int r = 0;r<m1.getColoumn();r++){
                            if(i==j){
                                arr3[i][j] = arr2[i];
                            }
                            else{
                                arr3[i][j] = arr2[j];
                            }
                        }
                    }
                }
            }
            else{
                double[][] arr2 = m1.getArr();
                double[][] arr_x = new double[this.getRow()][this.getColoumn()];
                for(int i = 0;i<this.getRow();i++){
                    for(int j = 0;j<this.getColoumn();j++){
                        arr_x[i][j] = 1;
                    }
                }

                for(int i = 0;i<this.getRow();i++){
                    for(int j = 0;j<m1.getColoumn();j++) {
                        for(int r = 0;r<m1.getRow();r++){
                            arr3[i][j] += arr2[r][j]*arr_x[i][r];
                        }
                    }
                }
            }
            return arr3;
        }
        else{
            System.out.println("These matrices cannot be multiplied");
            return null;
        }
    }

    @Override
    double[][] mul_1(Matrix m1){
        if(this.getRow()==m1.getRow() && this.getColoumn()==m1.getColoumn()){
            boolean flag1 = true;
            boolean flag2 = true;
            boolean flag3 = true;
            boolean flag4 = true;
            boolean flag5 = true;
            for(int i = 0;i<m1.get_Matrix_type().size();i++){
                if(m1.get_Matrix_type().get(i).equals("Diagonal Matrix")){
                    flag1 = false;
                }
            }
            for(int i = 0;i<m1.get_Matrix_type().size();i++){
                if(m1.get_Matrix_type().get(i).equals("Scalar Matrix")){
                    flag2 = false;
                }
            }
            for(int i = 0;i<m1.get_Matrix_type().size();i++){
                if(m1.get_Matrix_type().get(i).equals("Identity Matrix")){
                    flag3 = false;
                }
            }
            for(int i = 0;i<m1.get_Matrix_type().size();i++){
                if(m1.get_Matrix_type().get(i).equals("Ones Matrix")){
                    flag4 = false;
                }
            }
            for(int i = 0;i<m1.get_Matrix_type().size();i++){
                if(m1.get_Matrix_type().get(i).equals("Null Matrix")){
                    flag5 = false;
                }
            }
            double[][] arr3 = new double[this.getRow()][this.getColoumn()];
            if(!flag5){
                for(int i = 0;i<this.getRow();i++){
                    for(int j =0;j<this.getColoumn();j++){
                        arr3[i][j] = 0;
                    }
                }
            }
            else if(!flag4){
                for(int i = 0;i<this.getRow();i++){
                    for(int j =0;j<this.getColoumn();j++){
                        arr3[i][j] = 1;
                    }
                }
            }
            else if(!flag3){
                for(int i = 0;i<this.getRow();i++){
                    for(int j =0;j<this.getColoumn();j++){
                        if(i==j){
                            arr3[i][j] = 1;
                        }
                        else{
                            arr3[i][j] = 0;
                        }
                    }
                }
            }
            else if(!flag2){
                double arr2 = m1.get_intArr();
                for(int i = 0;i<this.getRow();i++){
                    for(int j =0;j<this.getColoumn();j++){
                        if(i==j){
                            arr3[i][j] = 1*arr2;
                        }
                        else{
                            arr3[i][j] = 0;
                        }
                    }
                }
            }
            else if(!flag1){
                double[] arr2 = m1.getArray();
                for(int i = 0;i<this.getRow();i++){
                    for(int j =0;j<this.getColoumn();j++){
                        if(i==j){
                            arr3[i][j] = 1*arr2[i];
                        }
                        else{
                            arr3[i][j] = 0;
                        }
                    }
                }
            }
            else{
                double[][] arr2 = m1.getArr();
                for(int i = 0;i<this.getRow();i++){
                    for(int j =0;j<this.getColoumn();j++){
                        arr3[i][j] = 1*arr2[i][j];
                    }
                }
            }
            return arr3;
        }
        System.out.println("Cannot be multiplied");
        return null;
    }
    @Override
    double[][] div_1(Matrix m1){
        if(this.getRow()==m1.getRow() && this.getColoumn()==m1.getColoumn()){
            boolean flag1 = true;
            boolean flag2 = true;
            boolean flag3 = true;
            boolean flag4 = true;
            boolean flag5 = true;
            for(int i = 0;i<m1.get_Matrix_type().size();i++){
                if(m1.get_Matrix_type().get(i).equals("Diagonal Matrix")){
                    flag1 = false;
                }
            }
            for(int i = 0;i<m1.get_Matrix_type().size();i++){
                if(m1.get_Matrix_type().get(i).equals("Scalar Matrix")){
                    flag2 = false;
                }
            }
            for(int i = 0;i<m1.get_Matrix_type().size();i++){
                if(m1.get_Matrix_type().get(i).equals("Identity Matrix")){
                    flag3 = false;
                }
            }
            for(int i = 0;i<m1.get_Matrix_type().size();i++){
                if(m1.get_Matrix_type().get(i).equals("Ones Matrix")){
                    flag4 = false;
                }
            }
            for(int i = 0;i<m1.get_Matrix_type().size();i++){
                if(m1.get_Matrix_type().get(i).equals("Null Matrix")){
                    flag5 = false;
                }
            }
            double[][] arr3 = new double[this.getRow()][this.getColoumn()];
            if(!flag5){
                System.out.println("Division by zero not possible: ERROR");
            }
            else if(!flag4){
                for(int i = 0;i<this.getRow();i++){
                    for(int j =0;j<this.getColoumn();j++){
                        arr3[i][j] = 1;
                    }
                }
            }
            else if(!flag3){
                System.out.println("Division by zero not possible: ERROR");
            }
            else if(!flag2){
                System.out.println("Division by zero not possible: ERROR");
            }
            else if(!flag1){
                System.out.println("Division by zero not possible: ERROR");
            }
            else{
                double[][] arr2 = m1.getArr();
                boolean pres = true;
                for(int i = 0;i<this.getRow();i++){
                    for(int j =0;j<this.getColoumn();j++){
                        if(arr2[i][j]!=0) {
                            arr3[i][j] = 1/arr2[i][j];
                        }
                        else{
                            pres = false;
                        }
                    }
                }
                if(!pres) {
                    System.out.println("Division by zero not possible: ERROR");
                    return null;
                }
            }
            return arr3;
        }
        System.out.println("Cannot be divided");
        return null;
    }

    ArrayList eigenvalue(){
        return super.eigenvalue();
    }
    double[][] eigenvector(){
        return super.eigenvector();
    }
    @Override
    double[][] scale(Matrix m1){
        if(this.getRow()==this.getColoumn() && this.getRow()==1){
            boolean flag1 = true;
            boolean flag2 = true;
            boolean flag3 = true;
            boolean flag4 = true;
            boolean flag5 = true;
            double[][] arr3 = new double[m1.getRow()][m1.getColoumn()];
            for(int i = 0;i<m1.get_Matrix_type().size();i++){
                if(m1.get_Matrix_type().get(i).equals("Diagonal Matrix")){
                    flag1 = false;
                }
                if(m1.get_Matrix_type().get(i).equals("Scalar Matrix")){
                    flag2 = false;
                }
                if(m1.get_Matrix_type().get(i).equals("Identity Matrix")){
                    flag3 = false;
                }
                if(m1.get_Matrix_type().get(i).equals("Ones Matrix")){
                    flag4 = false;
                }
                if(m1.get_Matrix_type().get(i).equals("Null Matrix")){
                    flag5 = false;
                }
            }
            if(!flag5){
                for(int i = 0;i<m1.getRow();i++){
                    for(int j = 0;j<m1.getColoumn();j++){
                        arr3[i][j] = 0;
                    }
                }
            }
            else if(!flag4){
                for(int i = 0;i<m1.getRow();i++){
                    for(int j = 0;j<m1.getColoumn();j++){
                        arr3[i][j] = 1;
                    }
                }
            }
            else if(!flag3){
                for(int i = 0;i<m1.getRow();i++){
                    for(int j = 0;j<m1.getColoumn();j++){
                        if(i==j){
                            arr3[i][j] = 1;
                        }
                        else{
                            arr3[i][j] = 0;
                        }
                    }
                }
            }
            else if(!flag2){
                double d1 = m1.get_intArr();
                for(int i = 0;i<m1.getRow();i++){
                    for(int j = 0;j<m1.getColoumn();j++){
                        if(i==j){
                            arr3[i][j] = 1*d1;
                        }
                        else{
                            arr3[i][j] = 0;
                        }
                    }
                }
            }
            else if(!flag1){
                double[] d1 = m1.getArray();
                for(int i = 0;i<m1.getRow();i++){
                    for(int j = 0;j<m1.getColoumn();j++){
                        if(i==j){
                            arr3[i][j] = 1*d1[i];
                        }
                        else{
                            arr3[i][j] = 0;
                        }
                    }
                }
            }
            else{
                double[][] d1 = m1.getArr();
                for(int i = 0;i<m1.getRow();i++){
                    for(int j = 0;j<m1.getColoumn();j++){
                        arr3[i][j] = 1*d1[i][j];
                    }
                }
            }
            return arr3;
        }
        System.out.println("Cannot use this as scalar");
        return null;
    }
}
class Identity_Matrix extends Matrix{
    public Identity_Matrix(int row, int coloumn, String name) {
        super(row, coloumn, name);
        super.setMatrix_type("Identity Matrix");
        super.setMatrix_type("Symmetric Matrix");
        super.setMatrix_type("Scalar Matrix");
        super.setMatrix_type("Diagonal Matrix");
        super.setMatrix_type("Square Matrix");
    }
    public int getRow(){
        return super.getRow();
    }
    public int getColoumn(){
        return super.getColoumn();
    }
    public ArrayList get_Matrix_type(){
        return super.get_Matrix_type();
    }
    @Override
    public void get_Row_mean(){
        for(int i = 0;i< super.getArray().length;i++){
            System.out.print("Mean of row"+(i+1)+": ");
            System.out.print(1/getRow());
            System.out.println();
        }
    }
    @Override
    public void get_Coloumn_mean(){
        for(int i = 0;i< super.getArray().length;i++){
            System.out.print("Mean of coloumn"+(i+1)+": ");
            System.out.print(1/getRow());
            System.out.println();
        }
    }
    @Override
    public double[][] transpose_1(){
        double[][] d = new double[this.getRow()][this.getColoumn()];
        for(int i = 0;i<this.getRow();i++){
            for(int j = 0;j<this.getColoumn();j++){
                if(i!=j){
                    d[i][j] = 0;
                }
                else{
                    d[i][j] = 1;
                }
            }
        }
        return d;
    }
    @Override
    public void Total_mean(){
        System.out.print("Mean: ");
        System.out.println(3/(getColoumn()*getRow()));
    }
    @Override
    double[][] compute_transpose_addition(){
        double[][] arr3 = new double[getRow()][getColoumn()];
        for(int i = 0;i<getRow();i++){
            for(int j = 0;j<getColoumn();j++){
                if(i==j){
                    arr3[i][j]= 2;
                }
                else{
                    arr3[i][j]= 0;
                }
            }
        }
        return arr3;
    }
    @Override
    double[][] adj_2(){
        double[][] adj = new double[2][2];
        adj[0][0] = 1;
        adj[1][1] = 1;
        adj[0][1] = 0;
        adj[1][0] = 0;
        return adj;
    }
    @Override
    double[][] adj_3(){
        double[][] adj = new double[3][3];
        double det1 = 1;
        double det2 = 0;
        double det3 = 0;
        double det4 = 0;
        double det5 = 1;
        double det6 = 0;
        double det7 = 0;
        double det8 = 0;
        double det9 = 1;
        adj[0][0] = det1;
        adj[0][1] = det2;
        adj[0][2] = det3;
        adj[1][0] = det4;
        adj[1][1] = det5;
        adj[1][2] = det6;
        adj[2][0] = det7;
        adj[2][1] = det8;
        adj[2][2] = det9;
        return adj;
    }
    @Override
    double determinant(){
        return 1;
    }
    double[][] inverse_2(){
        return super.inverse_2();
    }
    @Override
    double[][] add(Matrix m1){
        if(this.getRow()==m1.getRow() && this.getColoumn()==m1.getColoumn()){
            boolean flag1 = true;
            boolean flag2 = true;
            boolean flag3 = true;
            boolean flag4 = true;
            boolean flag5 = true;
            for(int i = 0;i<m1.get_Matrix_type().size();i++){
                if(m1.get_Matrix_type().get(i).equals("Diagonal Matrix")){
                    flag1 = false;
                }
                if(m1.get_Matrix_type().get(i).equals("Scalar Matrix")){
                    flag2 = false;
                }
                if(m1.get_Matrix_type().get(i).equals("Identity Matrix")){
                    flag3 = false;
                }
                if(m1.get_Matrix_type().get(i).equals("Ones Matrix")){
                    flag4 = false;
                }
                if(m1.get_Matrix_type().get(i).equals("Null Matrix")){
                    flag5 = false;
                }
            }
            double[][] arr3 = new double[this.getRow()][this.getColoumn()];
            if(!flag5){
                for(int i = 0;i<this.getRow();i++){
                    for(int j = 0;j<this.getColoumn();j++){
                        if(i==j){
                            arr3[i][j] = 1;
                        }
                        else{
                            arr3[i][j] = 0;
                        }
                    }
                }
            }
            else if(!flag4){
                for(int i = 0;i<this.getRow();i++){
                    for(int j = 0;j<this.getColoumn();j++){
                        if(i==j){
                            arr3[i][j] = 1+1;
                        }
                        else{
                            arr3[i][j] = 1;
                        }
                    }
                }
            }
            else if(!flag3){
                for(int i = 0;i<this.getRow();i++){
                    for(int j = 0;j<this.getColoumn();j++){
                        if(i==j){
                            arr3[i][j] = 1+1;
                        }
                        else{
                            arr3[i][j] = 0;
                        }
                    }
                }
            }
            else if(!flag2){
                double arr2 = m1.get_intArr();
                for(int i = 0;i<this.getRow();i++){
                    for(int j = 0;j<this.getColoumn();j++){
                        if(i==j){
                            arr3[i][j] = 1+arr2;
                        }
                        else{
                            arr3[i][j] = 0;
                        }
                    }
                }
            }
            else if(!flag1){
                double[] arr2 = m1.getArray();
                for(int i = 0;i<this.getRow();i++){
                    for(int j = 0;j<this.getColoumn();j++){
                        if(i==j){
                            arr3[i][j] = 1+arr2[i];
                        }
                        else{
                            arr3[i][j] = 0;
                        }
                    }
                }
            }
            else{
                double[][] arr2 = m1.getArr();
                for(int i = 0;i<this.getRow();i++){
                    for(int j = 0;j<this.getColoumn();j++){
                        if(i==j){
                            arr3[i][j] = 1+arr2[i][j];
                        }
                        else{
                            arr3[i][j] = arr2[i][j];
                        }
                    }
                }
            }
            return arr3;
        }
        else{
            System.out.println("These matrices cannot be added");
            return null;
        }
    }
    @Override
    double[][] sub(Matrix m1){
        if(this.getRow()==m1.getRow() && this.getColoumn()==m1.getColoumn()){
            boolean flag1 = true;
            boolean flag2 = true;
            boolean flag3 = true;
            boolean flag4 = true;
            boolean flag5 = true;
            for(int i = 0;i<m1.get_Matrix_type().size();i++){
                if(m1.get_Matrix_type().get(i).equals("Diagonal Matrix")){
                    flag1 = false;
                }
                if(m1.get_Matrix_type().get(i).equals("Scalar Matrix")){
                    flag2 = false;
                }
                if(m1.get_Matrix_type().get(i).equals("Identity Matrix")){
                    flag3 = false;
                }
                if(m1.get_Matrix_type().get(i).equals("Ones Matrix")){
                    flag4 = false;
                }
                if(m1.get_Matrix_type().get(i).equals("Null Matrix")){
                    flag5 = false;
                }
            }
            double[][] arr3 = new double[this.getRow()][this.getColoumn()];
            if(!flag5){
                for(int i = 0;i<this.getRow();i++){
                    for(int j = 0;j<this.getColoumn();j++){
                        if(i==j){
                            arr3[i][j] = 1;
                        }
                        else{
                            arr3[i][j] = 0;
                        }
                    }
                }
            }
            else if(!flag4){
                for(int i = 0;i<this.getRow();i++){
                    for(int j = 0;j<this.getColoumn();j++){
                        if(i==j){
                            arr3[i][j] = 0;
                        }
                        else{
                            arr3[i][j] = -1;
                        }
                    }
                }
            }
            else if(!flag3){
                for(int i = 0;i<this.getRow();i++){
                    for(int j = 0;j<this.getColoumn();j++){
                        arr3[i][j] = 0;
                    }
                }
            }
            else if(!flag2){
                double arr2 = m1.get_intArr();
                for(int i = 0;i<this.getRow();i++){
                    for(int j = 0;j<this.getColoumn();j++){
                        if(i==j){
                            arr3[i][j] = 1-arr2;
                        }
                        else{
                            arr3[i][j] = 0;
                        }
                    }
                }
            }
            else if(!flag1){
                double[] arr2 = m1.getArray();
                for(int i = 0;i<this.getRow();i++){
                    for(int j = 0;j<this.getColoumn();j++){
                        if(i==j){
                            arr3[i][j] = 1-arr2[i];
                        }
                        else{
                            arr3[i][j] = 0;
                        }
                    }
                }
            }
            else{
                double[][] arr2 = m1.getArr();
                for(int i = 0;i<this.getRow();i++){
                    for(int j = 0;j<this.getColoumn();j++){
                        if(i==j){
                            arr3[i][j] = 1-arr2[i][j];
                        }
                        else{
                            arr3[i][j] = -arr2[i][j];
                        }
                    }
                }
            }
            return arr3;
        }
        else{
            System.out.println("These matrices cannot be subtracted");
            return null;
        }
    }
    @Override
    double[][] mul(Matrix m1){
        if(this.getColoumn()==m1.getRow()){
            boolean flag1 = true;
            boolean flag2 = true;
            boolean flag3 = true;
            boolean flag4 = true;
            boolean flag5 = true;
            for(int i = 0;i<m1.get_Matrix_type().size();i++){
                if(m1.get_Matrix_type().get(i).equals("Diagonal Matrix")){
                    flag1 = false;
                }
                if(m1.get_Matrix_type().get(i).equals("Scalar Matrix")){
                    flag2 = false;
                }
                if(m1.get_Matrix_type().get(i).equals("Identity Matrix")){
                    flag3 = false;
                }
                if(m1.get_Matrix_type().get(i).equals("Ones Matrix")){
                    flag4 = false;
                }
                if(m1.get_Matrix_type().get(i).equals("Null Matrix")){
                    flag5 = false;
                }
            }
            double[][] arr3 = new double[this.getRow()][this.getColoumn()];
            if(!flag5){
                for(int i = 0;i<this.getRow();i++){
                    for(int j = 0;j<m1.getColoumn();j++){
                        arr3[i][j] = 0;
                    }
                }
            }
            else if(!flag4){
                for(int i = 0;i<this.getRow();i++){
                    for(int j = 0;j<m1.getColoumn();j++){
                        arr3[i][j] = 1;
                    }
                }
            }
            else if(!flag3){
                for(int i = 0;i<this.getRow();i++){
                    for(int j = 0;j<m1.getColoumn();j++){
                        if(i==j){
                            arr3[i][j] = 1;
                        }
                        else{
                            arr3[i][j] = 0;
                        }
                    }
                }
            }
            else if(!flag2){
                double arr2 = m1.get_intArr();
                for(int i = 0;i<this.getRow();i++){
                    for(int j = 0;j<m1.getColoumn();j++){
                        if(i==j){
                            arr3[i][j] = arr2;
                        }
                        else{
                            arr3[i][j] = 0;
                        }
                    }
                }
            }
            else if(!flag1){
                double[] arr2 = m1.getArray();
                for(int i = 0;i<this.getRow();i++){
                    for(int j = 0;j<m1.getColoumn();j++){
                        if(i==j){
                            arr3[i][j] = arr2[i];
                        }
                        else{
                            arr3[i][j] = 0;
                        }
                    }
                }
            }
            else{
                double[][] arr2 = m1.getArr();
                arr3 = arr2;
            }
            return arr3;
        }
        else{
            System.out.println("These matrices cannot be multiplied");
            return null;
        }
    }

    @Override
    double[][] mul_1(Matrix m1){
        if(this.getRow()==m1.getRow() && this.getColoumn()==m1.getColoumn()){
            boolean flag1 = true;
            boolean flag2 = true;
            boolean flag3 = true;
            boolean flag4 = true;
            boolean flag5 = true;
            for(int i = 0;i<m1.get_Matrix_type().size();i++){
                if(m1.get_Matrix_type().get(i).equals("Diagonal Matrix")){
                    flag1 = false;
                }
            }
            for(int i = 0;i<m1.get_Matrix_type().size();i++){
                if(m1.get_Matrix_type().get(i).equals("Scalar Matrix")){
                    flag2 = false;
                }
            }
            for(int i = 0;i<m1.get_Matrix_type().size();i++){
                if(m1.get_Matrix_type().get(i).equals("Identity Matrix")){
                    flag3 = false;
                }
            }
            for(int i = 0;i<m1.get_Matrix_type().size();i++){
                if(m1.get_Matrix_type().get(i).equals("Ones Matrix")){
                    flag4 = false;
                }
            }
            for(int i = 0;i<m1.get_Matrix_type().size();i++){
                if(m1.get_Matrix_type().get(i).equals("Null Matrix")){
                    flag5 = false;
                }
            }
            double[][] arr3 = new double[this.getRow()][this.getColoumn()];
            if(!flag5){
                for(int i = 0;i<this.getRow();i++){
                    for(int j =0;j<this.getColoumn();j++){
                        arr3[i][j] = 0;
                    }
                }
            }
            else if(!flag4){
                for(int i = 0;i<this.getRow();i++){
                    for(int j =0;j<this.getColoumn();j++){
                        if(i==j){
                            arr3[i][j] = 1;
                        }
                        else{
                            arr3[i][j] = 0;
                        }
                    }
                }
            }
            else if(!flag3){
                for(int i = 0;i<this.getRow();i++){
                    for(int j =0;j<this.getColoumn();j++){
                        if(i==j){
                            arr3[i][j] = 1;
                        }
                        else{
                            arr3[i][j] = 0;
                        }
                    }
                }
            }
            else if(!flag2){
                double arr2 = m1.get_intArr();
                for(int i = 0;i<this.getRow();i++){
                    for(int j =0;j<this.getColoumn();j++){
                        if(i==j){
                            arr3[i][j] = 1*arr2;
                        }
                        else{
                            arr3[i][j] = 0;
                        }
                    }
                }
            }
            else if(!flag1){
                double[] arr2 = m1.getArray();
                for(int i = 0;i<this.getRow();i++){
                    for(int j =0;j<this.getColoumn();j++){
                        if(i==j){
                            arr3[i][j] = 1*arr2[i];
                        }
                        else{
                            arr3[i][j] = 0;
                        }
                    }
                }
            }
            else{
                double[][] arr2 = m1.getArr();
                for(int i = 0;i<this.getRow();i++){
                    for(int j =0;j<this.getColoumn();j++){
                        if (i == j) {
                            arr3[i][j] = 1*arr2[i][j];
                        }
                        else{
                            arr3[i][j] = 0;
                        }
                    }
                }
            }
            return arr3;
        }
        System.out.println("Cannot be multiplied");
        return null;
    }
    @Override
    double[][] div_1(Matrix m1){
        if(this.getRow()==m1.getRow() && this.getColoumn()==m1.getColoumn()){
            boolean flag1 = true;
            boolean flag2 = true;
            boolean flag3 = true;
            boolean flag4 = true;
            boolean flag5 = true;
            for(int i = 0;i<m1.get_Matrix_type().size();i++){
                if(m1.get_Matrix_type().get(i).equals("Diagonal Matrix")){
                    flag1 = false;
                }
            }
            for(int i = 0;i<m1.get_Matrix_type().size();i++){
                if(m1.get_Matrix_type().get(i).equals("Scalar Matrix")){
                    flag2 = false;
                }
            }
            for(int i = 0;i<m1.get_Matrix_type().size();i++){
                if(m1.get_Matrix_type().get(i).equals("Identity Matrix")){
                    flag3 = false;
                }
            }
            for(int i = 0;i<m1.get_Matrix_type().size();i++){
                if(m1.get_Matrix_type().get(i).equals("Ones Matrix")){
                    flag4 = false;
                }
            }
            for(int i = 0;i<m1.get_Matrix_type().size();i++){
                if(m1.get_Matrix_type().get(i).equals("Null Matrix")){
                    flag5 = false;
                }
            }
            double[][] arr3 = new double[this.getRow()][this.getColoumn()];
            if(!flag5){
                System.out.println("Division by zero not possible: ERROR");
            }
            else if(!flag4){
                for(int i = 0;i<this.getRow();i++){
                    for(int j =0;j<this.getColoumn();j++){
                        if(i==j){
                            arr3[i][j] = 1;
                        }
                        else{
                            arr3[i][j] = 0;
                        }
                    }
                }
            }
            else if(!flag3){
                System.out.println("Division by zero not possible: ERROR");
            }
            else if(!flag2){
                System.out.println("Division by zero not possible: ERROR");
            }
            else if(!flag1){
                System.out.println("Division by zero not possible: ERROR");
            }
            else{
                double[][] arr2 = m1.getArr();
                boolean pres = true;
                for(int i = 0;i<this.getRow();i++){
                    for(int j =0;j<this.getColoumn();j++){
                        if (i == j) {
                            if(arr2[i][j]!=0) {
                                arr3[i][j] = 1/arr2[i][j];
                            }
                            else{
                                pres = false;
                            }
                        }
                        else{
                            if(arr2[i][j]!=0){
                                arr3[i][j] = 0;
                            }
                            else{
                                pres = false;
                            }
                        }
                    }
                }
                if(!pres) {
                    System.out.println("Division by zero not possible: ERROR");
                    return null;
                }
            }
            return arr3;
        }
        System.out.println("Cannot be divided");
        return null;
    }

    ArrayList eigenvalue(){
        return super.eigenvalue();
    }
    double[][] eigenvector(){
        return super.eigenvector();
    }
}
class Symmetric_Matrix extends Matrix{
    public Symmetric_Matrix(int row, int coloumn, double[][] arr, String name) {
        super(row, coloumn, arr, name);
        super.setMatrix_type("Symmetric Matrix");
        super.setMatrix_type("Square Matrix");
        if(determinant()==0){
            super.setMatrix_type("Singular Matrix");
        }
    }
    public int getRow(){
        return super.getRow();
    }
    public int getColoumn(){
        return super.getColoumn();
    }
    public ArrayList get_Matrix_type(){
        return super.get_Matrix_type();
    }
    public void get_Row_mean(){
        super.get_Row_mean();
    }
    public void get_Coloumn_mean(){
        super.get_Coloumn_mean();
    }
    public double[][] transpose_1(){
        return super.transpose_1();
    }
    public void Total_mean(){
        super.Total_mean();
    }
    double[][] compute_transpose_addition(){
        return super.compute_transpose_addition();
    }
    double[][] adj_2(){
        return super.adj_2();
    }
    double[][] adj_3(){
        return super.adj_3();
    }
    double determinant(){
        return super.determinant();
    }
    double[][] inverse_2(){
        return super.inverse_2();
    }
    double[][] add(Matrix m1){
        return super.add(m1);
    }
    double[][] sub(Matrix m1){
        return super.sub(m1);
    }
    double[][] mul(Matrix m1){
        return super.mul(m1);
    }

    double[][] mul_1(Matrix m1){
        return super.mul_1(m1);
    }
    double[][] div_1(Matrix m1){return super.div_1(m1);}

    ArrayList eigenvalue(){
        return super.eigenvalue();
    }
    double[][] eigenvector(){
        return super.eigenvector();
    }
}
class Skew_Symmetric_Matrix extends Matrix{
    public Skew_Symmetric_Matrix(int row, int coloumn, double[][] arr, String name) {
        super(row, coloumn, arr, name);
        super.setMatrix_type("Skew Symmetric Matrix");
        super.setMatrix_type("Square Matrix");
        if(determinant()==0){
            super.setMatrix_type("Singular Matrix");
        }
    }
    public int getRow(){
        return super.getRow();
    }
    public int getColoumn(){
        return super.getColoumn();
    }
    public ArrayList get_Matrix_type(){
        return super.get_Matrix_type();
    }
    public void get_Row_mean(){
        super.get_Row_mean();
    }
    public void get_Coloumn_mean(){
        super.get_Coloumn_mean();
    }
    public double[][] transpose_1(){
        return super.transpose_1();
    }
    public void Total_mean(){
        super.Total_mean();
    }
    double[][] compute_transpose_addition(){
        return super.compute_transpose_addition();
    }
    double[][] adj_2(){
        return super.adj_2();
    }
    double[][] adj_3(){
        return super.adj_3();
    }
    double determinant(){
        return super.determinant();
    }
    double[][] inverse_2(){
        return super.inverse_2();
    }
    double[][] add(Matrix m1){
        return super.add(m1);
    }
    double[][] sub(Matrix m1){
        return super.sub(m1);
    }
    double[][] mul(Matrix m1){
        return super.mul(m1);
    }

    double[][] mul_1(Matrix m1){
        return super.mul_1(m1);
    }
    double[][] div_1(Matrix m1){return super.div_1(m1);}

    ArrayList eigenvalue(){
        return super.eigenvalue();
    }
    double[][] eigenvector(){
        return super.eigenvector();
    }
}
class Upper_Tringular_Matrix extends Matrix{
    public Upper_Tringular_Matrix(int row, int coloumn, double[][] arr, String name) {
        super(row, coloumn, arr, name);
        super.setMatrix_type("Upper Tringular Matrix");
        super.setMatrix_type("Square Matrix");
    }
    public int getRow(){
        return super.getRow();
    }
    public int getColoumn(){
        return super.getColoumn();
    }
    public ArrayList get_Matrix_type(){
        return super.get_Matrix_type();
    }
    public void get_Row_mean(){
        super.get_Row_mean();
    }
    public void get_Coloumn_mean(){
        super.get_Coloumn_mean();
    }
    public double[][] transpose_1(){
        return super.transpose_1();
    }
    public void Total_mean(){
        super.Total_mean();
    }
    double[][] compute_transpose_addition(){
        return super.compute_transpose_addition();
    }
    double[][] adj_2(){
        return super.adj_2();
    }
    double[][] adj_3(){
        return super.adj_3();
    }
    double determinant(){
        return super.determinant();
    }
    double[][] inverse_2(){
        return super.inverse_2();
    }
    double[][] add(Matrix m1){
        return super.add(m1);
    }
    double[][] sub(Matrix m1){
        return super.sub(m1);
    }
    double[][] mul(Matrix m1){
        return super.mul(m1);
    }
    double[][] mul_1(Matrix m1){
        return super.mul_1(m1);
    }
    double[][] div_1(Matrix m1){return super.div_1(m1);}
    ArrayList eigenvalue(){
        return super.eigenvalue();
    }
    double[][] eigenvector(){
        return super.eigenvector();
    }
}
class Lower_Tringular_Matrix extends Matrix{
    public Lower_Tringular_Matrix(int row, int coloumn, double[][] arr, String name) {
        super(row, coloumn, arr, name);
        super.setMatrix_type("Lower Tringular Matrix");
        super.setMatrix_type("Square Matrix");
    }
    public int getRow(){
        return super.getRow();
    }
    public int getColoumn(){
        return super.getColoumn();
    }
    public ArrayList get_Matrix_type(){
        return super.get_Matrix_type();
    }
    public void get_Row_mean(){
        super.get_Row_mean();
    }
    public void get_Coloumn_mean(){
        super.get_Coloumn_mean();
    }
    public double[][] transpose_1(){
        return super.transpose_1();
    }
    public void Total_mean(){
        super.Total_mean();
    }
    double[][] compute_transpose_addition(){
        return super.compute_transpose_addition();
    }
    double[][] adj_2(){
        return super.adj_2();
    }
    double[][] adj_3(){
        return super.adj_3();
    }
    double determinant(){
        return super.determinant();
    }
    double[][] inverse_2(){
        return super.inverse_2();
    }
    double[][] add(Matrix m1){
        return super.add(m1);
    }
    double[][] sub(Matrix m1){
        return super.sub(m1);
    }
    double[][] mul(Matrix m1){
        return super.mul(m1);
    }
    double[][] mul_1(Matrix m1){
        return super.mul_1(m1);
    }
    double[][] div_1(Matrix m1){return super.div_1(m1);}
    ArrayList eigenvalue(){
        return super.eigenvalue();
    }
    double[][] eigenvector(){
        return super.eigenvector();
    }
}
class Singular_Matrix extends Matrix{
    public Singular_Matrix(int row, int coloumn, double[][] arr, String name) {
        super(row, coloumn, arr, name);
        super.setMatrix_type("Singular Matrix");
        super.setMatrix_type("Square Matrix");
    }
    public int getRow(){
        return super.getRow();
    }
    public int getColoumn(){
        return super.getColoumn();
    }
    public ArrayList get_Matrix_type(){
        return super.get_Matrix_type();
    }
    public void get_Row_mean(){
        super.get_Row_mean();
    }
    public void get_Coloumn_mean(){
        super.get_Coloumn_mean();
    }
    public double[][] transpose_1(){
        return super.transpose_1();
    }
    public void Total_mean(){
        super.Total_mean();
    }
    double[][] compute_transpose_addition(){
        return super.compute_transpose_addition();
    }
    double[][] adj_2(){
        return super.adj_2();
    }
    double[][] adj_3(){
        return super.adj_3();
    }
    double determinant(){
        return super.determinant();
    }
    double[][] add(Matrix m1){
        return super.add(m1);
    }
    double[][] sub(Matrix m1){
        return super.sub(m1);
    }
    double[][] mul(Matrix m1){
        return super.mul(m1);
    }
    double[][] mul_1(Matrix m1){
        return super.mul_1(m1);
    }
    double[][] div_1(Matrix m1){return super.div_1(m1);}
    ArrayList eigenvalue(){
        return super.eigenvalue();
    }
    double[][] eigenvector(){
        return super.eigenvector();
    }

}
class Scalar_Matrix extends Matrix{
    public Scalar_Matrix(int row, int coloumn, double arr, String name) {
        super(row, coloumn, arr, name);
        super.setMatrix_type("Scalar Matrix");
        super.setMatrix_type("Symmetric Matrix");
        super.setMatrix_type("Diagonal Matrix");
        super.setMatrix_type("Square Matrix");
    }
    double get_intArr(){
        return super.get_intArr();
    }
    public int getRow(){
        return super.getRow();
    }
    public int getColoumn(){
        return super.getColoumn();
    }
    public ArrayList get_Matrix_type(){
        return super.get_Matrix_type();
    }
    @Override
    public void get_Row_mean(){
        for(int i = 0;i< getRow();i++){
            System.out.print("Mean of row"+(i+1)+": ");
            System.out.print(super.get_intArr()/getRow());
            System.out.println();
        }
    }
    @Override
    public void get_Coloumn_mean(){
        for(int i = 0;i< getRow();i++){
            System.out.print("Mean of coloumn"+(i+1)+": ");
            System.out.print(super.get_intArr()/getRow());
            System.out.println();
        }
    }
    @Override
    public double[][] transpose_1(){
        double[][] d = new double[this.getRow()][this.getColoumn()];
        for(int i = 0;i<this.getRow();i++){
            for(int j = 0;j<this.getColoumn();j++){
                if(i!=j){
                    d[i][j] = 0;
                }
                else{
                    d[i][j] = super.get_intArr();
                }
            }
        }
        return d;
    }
    @Override
    public void Total_mean(){
        System.out.print("Mean: ");
        double mean = super.get_intArr()*3;
        System.out.println(mean/(getColoumn()*getRow()));
    }
    @Override
    double[][] compute_transpose_addition(){
        double[][] arr3 = new double[getRow()][getColoumn()];
        double a = get_intArr();
        for(int i = 0;i<getRow();i++){
            for(int j = 0;j<getColoumn();j++){
                if(i==j){
                    arr3[i][j]= a+a;
                }
                else{
                    arr3[i][j]= 0;
                }
            }
        }
        return arr3;
    }
    @Override
    double[][] adj_2(){
        double[][] adj = new double[2][2];
        adj[0][0] = super.get_intArr();
        adj[1][1] = super.get_intArr();
        adj[0][1] = 0;
        adj[1][0] = 0;
        return adj;
    }
    @Override
    double[][] adj_3(){
        double[][] adj = new double[3][3];
        double x = super.get_intArr();
        double det1 = x*x;
        double det2 = 0;
        double det3 = 0;
        double det4 = 0;
        double det5 = x*x;
        double det6 = 0;
        double det7 = 0;
        double det8 = 0;
        double det9 = x*x;
        adj[0][0] = det1;
        adj[0][1] = det2;
        adj[0][2] = det3;
        adj[1][0] = det4;
        adj[1][1] = det5;
        adj[1][2] = det6;
        adj[2][0] = det7;
        adj[2][1] = det8;
        adj[2][2] = det9;
        return adj;
    }
    @Override
    double determinant(){
        double x = super.get_intArr();
        if(getRow()==2){
            return (x)*(x);
        }
        else if(getRow()==3){
            return (x)*(x)*(x);
        }
        return 0;
    }
    double[][] inverse_2(){
        return super.inverse_2();
    }
    @Override
    double[][] add(Matrix m1){
        if(this.getRow()==m1.getRow() && this.getColoumn()==m1.getColoumn()){
            double arr1 = this.get_intArr();
            boolean flag1 = true;
            boolean flag2 = true;
            boolean flag3 = true;
            boolean flag4 = true;
            boolean flag5 = true;
            for(int i = 0;i<m1.get_Matrix_type().size();i++){
                if(m1.get_Matrix_type().get(i).equals("Diagonal Matrix")){
                    flag1 = false;
                }
                if(m1.get_Matrix_type().get(i).equals("Scalar Matrix")){
                    flag2 = false;
                }
                if(m1.get_Matrix_type().get(i).equals("Identity Matrix")){
                    flag3 = false;
                }
                if(m1.get_Matrix_type().get(i).equals("Ones Matrix")){
                    flag4 = false;
                }
                if(m1.get_Matrix_type().get(i).equals("Null Matrix")){
                    flag5 = false;
                }
            }
            double[][] arr3 = new double[this.getRow()][this.getColoumn()];
            if(!flag5){
                for(int i = 0;i<this.getRow();i++){
                    for(int j = 0;j<this.getColoumn();j++){
                        if(i==j){
                            arr3[i][j] = arr1;
                        }
                        else{
                            arr3[i][j] = 0;
                        }
                    }
                }
            }
            else if(!flag4){
                for(int i = 0;i<this.getRow();i++){
                    for(int j = 0;j<this.getColoumn();j++){
                        if(i==j){
                            arr3[i][j] = arr1+1;
                        }
                        else{
                            arr3[i][j] = 1;
                        }
                    }
                }
            }
            else if(!flag3){
                for(int i = 0;i<this.getRow();i++){
                    for(int j = 0;j<this.getColoumn();j++){
                        if(i==j){
                            arr3[i][j] = arr1+1;
                        }
                        else{
                            arr3[i][j] = 0;
                        }
                    }
                }
            }
            else if(!flag2){
                double arr2 = m1.get_intArr();
                for(int i = 0;i<this.getRow();i++){
                    for(int j = 0;j<this.getColoumn();j++){
                        if(i==j){
                            arr3[i][j] = arr1+arr2;
                        }
                        else{
                            arr3[i][j] = 0;
                        }
                    }
                }
            }
            else if(!flag1){
                double[] arr2 = m1.getArray();

                for(int i = 0;i<this.getRow();i++){
                    for(int j = 0;j<this.getColoumn();j++){
                        if(i==j){
                            arr3[i][j] = arr1+arr2[i];
                        }
                        else{
                            arr3[i][j] = 0;
                        }
                    }
                }
            }
            else{
                double[][] arr2 = m1.getArr();
                for(int i = 0;i<this.getRow();i++){
                    for(int j = 0;j<this.getColoumn();j++){
                        if(i==j){
                            arr3[i][j] = arr1+arr2[i][j];
                        }
                        else{
                            arr3[i][j] = arr2[i][j];
                        }
                    }
                }
            }
            return arr3;
        }
        else{
            System.out.println("These matrices cannot be added");
            return null;
        }
    }
    @Override
    double[][] sub(Matrix m1){
        if(this.getRow()==m1.getRow() && this.getColoumn()==m1.getColoumn()){
            double arr1 = this.get_intArr();
            boolean flag1 = true;
            boolean flag2 = true;
            boolean flag3 = true;
            boolean flag4 = true;
            boolean flag5 = true;
            for(int i = 0;i<m1.get_Matrix_type().size();i++){
                if(m1.get_Matrix_type().get(i).equals("Diagonal Matrix")){
                    flag1 = false;
                }
                if(m1.get_Matrix_type().get(i).equals("Scalar Matrix")){
                    flag2 = false;
                }
                if(m1.get_Matrix_type().get(i).equals("Identity Matrix")){
                    flag3 = false;
                }
                if(m1.get_Matrix_type().get(i).equals("Ones Matrix")){
                    flag4 = false;
                }
                if(m1.get_Matrix_type().get(i).equals("Null Matrix")){
                    flag5 = false;
                }
            }
            double[][] arr3 = new double[this.getRow()][this.getColoumn()];
            if(!flag5){
                for(int i = 0;i<this.getRow();i++){
                    for(int j = 0;j<this.getColoumn();j++){
                        if(i==j){
                            arr3[i][j] = arr1;
                        }
                        else{
                            arr3[i][j] = 0;
                        }
                    }
                }
            }
            else if(!flag4){
                for(int i = 0;i<this.getRow();i++){
                    for(int j = 0;j<this.getColoumn();j++){
                        if(i==j){
                            arr3[i][j] = arr1-1;
                        }
                        else{
                            arr3[i][j] = -1;
                        }
                    }
                }
            }
            else if(!flag3){
                for(int i = 0;i<this.getRow();i++){
                    for(int j = 0;j<this.getColoumn();j++){
                        if(i==j){
                            arr3[i][j] = arr1-1;
                        }
                        else{
                            arr3[i][j] = 0;
                        }
                    }
                }
            }
            else if(!flag2){
                double arr2 = m1.get_intArr();
                for(int i = 0;i<this.getRow();i++){
                    for(int j = 0;j<this.getColoumn();j++){
                        if(i==j){
                            arr3[i][j] = arr1-arr2;
                        }
                        else{
                            arr3[i][j] = 0;
                        }
                    }
                }
            }
            else if(!flag1){
                double[] arr2 = m1.getArray();

                for(int i = 0;i<this.getRow();i++){
                    for(int j = 0;j<this.getColoumn();j++){
                        if(i==j){
                            arr3[i][j] = arr1-arr2[i];
                        }
                        else{
                            arr3[i][j] = 0;
                        }
                    }
                }
            }
            else{
                double[][] arr2 = m1.getArr();
                for(int i = 0;i<this.getRow();i++){
                    for(int j = 0;j<this.getColoumn();j++){
                        if(i==j){
                            arr3[i][j] = arr1-arr2[i][j];
                        }
                        else{
                            arr3[i][j] = -arr2[i][j];
                        }
                    }
                }
            }
            return arr3;
        }
        else{
            System.out.println("These matrices cannot be subtracted");
            return null;
        }
    }
    @Override
    double[][] mul(Matrix m1){
        if(this.getColoumn()==m1.getRow()){
            double arr1 = this.get_intArr();
            boolean flag1 = true;
            boolean flag2 = true;
            boolean flag3 = true;
            boolean flag4 = true;
            boolean flag5 = true;
            double[][] arr3 = new double[this.getRow()][m1.getColoumn()];
            for(int i = 0;i<m1.get_Matrix_type().size();i++){
                if(m1.get_Matrix_type().get(i).equals("Diagonal Matrix")){
                    flag1 = false;
                }
                if(m1.get_Matrix_type().get(i).equals("Scalar Matrix")){
                    flag2 = false;
                }
                if(m1.get_Matrix_type().get(i).equals("Identity Matrix")){
                    flag3 = false;
                }
                if(m1.get_Matrix_type().get(i).equals("Ones Matrix")){
                    flag4 = false;
                }
                if(m1.get_Matrix_type().get(i).equals("Null Matrix")){
                    flag5 = false;
                }
            }
            if(!flag5){
                for(int i = 0;i<this.getRow();i++){
                    for(int j = 0;j<m1.getColoumn();j++) {
                        arr3[i][j] = 0;
                    }
                }
            }
            else if(!flag4){
                for(int i = 0;i<this.getRow();i++){
                    for(int j = 0;j<m1.getColoumn();j++) {
                        arr3[i][j] = arr1;
                    }
                }
            }
            else if(!flag3){
                for(int i = 0;i<this.getRow();i++){
                    for(int j = 0;j<m1.getColoumn();j++) {
                        if(i==j){
                            arr3[i][j] += arr1;
                        }
                        else{
                            arr3[i][j] = 0;
                        }
                    }
                }
            }
            else if(!flag2) {
                double arr2 = m1.get_intArr();
                for(int i = 0;i<this.getRow();i++){
                    for(int j = 0;j<m1.getColoumn();j++) {
                        if(i==j){
                            arr3[i][j] += arr1*arr2;
                        }
                        else{
                            arr3[i][j] = 0;
                        }
                    }
                }
            }
            else if(!flag1){
                double[] arr2 = m1.getArray();
                for(int i = 0;i<this.getRow();i++){
                    for(int j = 0;j<m1.getColoumn();j++) {
                        if(i==j){
                            arr3[i][j] += arr1*arr2[j];
                        }
                        else{
                            arr3[i][j] = 0;
                        }
                    }
                }
            }
            else{
                double[][] arr2 = m1.getArr();
                for(int i = 0;i<this.getRow();i++){
                    for(int j = 0;j<m1.getColoumn();j++) {
                        arr3[i][j] += arr1*arr2[i][j];
                    }
                }
            }
            return arr3;
        }
        else{
            System.out.println("Matrices cannot be multiplied");
            return null;
        }
    }
    @Override
    double[][] mul_1(Matrix m1){
        if(this.getRow()==m1.getRow() && this.getColoumn()==m1.getColoumn()){
            boolean flag1 = true;
            boolean flag2 = true;
            boolean flag3 = true;
            boolean flag4 = true;
            boolean flag5 = true;
            for(int i = 0;i<m1.get_Matrix_type().size();i++){
                if(m1.get_Matrix_type().get(i).equals("Diagonal Matrix")){
                    flag1 = false;
                }
            }
            for(int i = 0;i<m1.get_Matrix_type().size();i++){
                if(m1.get_Matrix_type().get(i).equals("Scalar Matrix")){
                    flag2 = false;
                }
            }
            for(int i = 0;i<m1.get_Matrix_type().size();i++){
                if(m1.get_Matrix_type().get(i).equals("Identity Matrix")){
                    flag3 = false;
                }
            }
            for(int i = 0;i<m1.get_Matrix_type().size();i++){
                if(m1.get_Matrix_type().get(i).equals("Ones Matrix")){
                    flag4 = false;
                }
            }
            for(int i = 0;i<m1.get_Matrix_type().size();i++){
                if(m1.get_Matrix_type().get(i).equals("Null Matrix")){
                    flag5 = false;
                }
            }
            double[][] arr3 = new double[this.getRow()][this.getColoumn()];
            if(!flag5){
                for(int i = 0;i<this.getRow();i++){
                    for(int j =0;j<this.getColoumn();j++){
                        arr3[i][j] = 0;
                    }
                }
            }
            else if(!flag4){
                for(int i = 0;i<this.getRow();i++){
                    for(int j =0;j<this.getColoumn();j++){
                        if(i==j){
                            arr3[i][j] = this.get_intArr();
                        }
                        else{
                            arr3[i][j] = 0;
                        }
                    }
                }
            }
            else if(!flag3){
                for(int i = 0;i<this.getRow();i++){
                    for(int j =0;j<this.getColoumn();j++){
                        if(i==j){
                            arr3[i][j] = this.get_intArr();
                        }
                        else{
                            arr3[i][j] = 0;
                        }
                    }
                }
            }
            else if(!flag2){
                double arr2 = m1.get_intArr();
                for(int i = 0;i<this.getRow();i++){
                    for(int j =0;j<this.getColoumn();j++){
                        if(i==j){
                            arr3[i][j] = this.get_intArr()*arr2;
                        }
                        else{
                            arr3[i][j] = 0;
                        }
                    }
                }
            }
            else if(!flag1){
                double[] arr2 = m1.getArray();
                for(int i = 0;i<this.getRow();i++){
                    for(int j =0;j<this.getColoumn();j++){
                        if(i==j){
                            arr3[i][j] = this.get_intArr()*arr2[i];
                        }
                        else{
                            arr3[i][j] = 0;
                        }
                    }
                }
            }
            else{
                double arr1 = this.get_intArr();;
                double[][] arr2 = m1.getArr();
                for(int i = 0;i<this.getRow();i++){
                    for(int j =0;j<this.getColoumn();j++){
                        if (i == j) {
                            arr3[i][j] = arr1*arr2[i][j];
                        }
                        else{
                            arr3[i][j] = 0;
                        }
                    }
                }
            }
            return arr3;
        }
        System.out.println("Cannot be multiplied");
        return null;
    }
    @Override
    double[][] div_1(Matrix m1){
        if(this.getRow()==m1.getRow() && this.getColoumn()==m1.getColoumn()){
            boolean flag1 = true;
            boolean flag2 = true;
            boolean flag3 = true;
            boolean flag4 = true;
            boolean flag5 = true;
            for(int i = 0;i<m1.get_Matrix_type().size();i++){
                if(m1.get_Matrix_type().get(i).equals("Diagonal Matrix")){
                    flag1 = false;
                }
            }
            for(int i = 0;i<m1.get_Matrix_type().size();i++){
                if(m1.get_Matrix_type().get(i).equals("Scalar Matrix")){
                    flag2 = false;
                }
            }
            for(int i = 0;i<m1.get_Matrix_type().size();i++){
                if(m1.get_Matrix_type().get(i).equals("Identity Matrix")){
                    flag3 = false;
                }
            }
            for(int i = 0;i<m1.get_Matrix_type().size();i++){
                if(m1.get_Matrix_type().get(i).equals("Ones Matrix")){
                    flag4 = false;
                }
            }
            for(int i = 0;i<m1.get_Matrix_type().size();i++){
                if(m1.get_Matrix_type().get(i).equals("Null Matrix")){
                    flag5 = false;
                }
            }
            double[][] arr3 = new double[this.getRow()][this.getColoumn()];
            if(!flag5){
                System.out.println("Division by zero not possible: ERROR");
            }
            else if(!flag4){
                for(int i = 0;i<this.getRow();i++){
                    for(int j =0;j<this.getColoumn();j++){
                        if(i==j){
                            arr3[i][j] = this.get_intArr();
                        }
                        else{
                            arr3[i][j] = 0;
                        }
                    }
                }
            }
            else if(!flag3){
                System.out.println("Division by zero not possible: ERROR");
            }
            else if(!flag2){
                System.out.println("Division by zero not possible: ERROR");
            }
            else if(!flag1){
                System.out.println("Division by zero not possible: ERROR");
            }
            else{
                double arr1 = this.get_intArr();
                double[][] arr2 = m1.getArr();
                boolean pres = true;
                for(int i = 0;i<this.getRow();i++){
                    for(int j =0;j<this.getColoumn();j++){
                        if (i == j) {
                            if(arr2[i][j]!=0) {
                                arr3[i][j] = arr1/arr2[i][j];
                            }
                            else{
                                pres = false;
                            }
                        }
                        else{
                            if(arr2[i][j]!=0){
                                arr3[i][j] = 0;
                            }
                            else{
                                pres = false;
                            }
                        }
                    }
                }
                if(!pres) {
                    System.out.println("Division by zero not possible: ERROR");
                    return null;
                }
            }
            return arr3;
        }
        System.out.println("Cannot be divided");
        return null;
    }
    ArrayList eigenvalue(){
        return super.eigenvalue();
    }
    double[][] eigenvector(){
        return super.eigenvector();
    }
}
class Diagonal_Matrix extends Matrix{
    public Diagonal_Matrix(int row, int coloumn, double[] arr, String name) {
        super(row, coloumn,arr, name);
        super.setMatrix_type("Diagonal Matrix");
        super.setMatrix_type("Symmetric Matrix");
        super.setMatrix_type("Square Matrix");
    }
    double[] getArray(){
        return super.getArray();
    }
    public int getRow(){
        return super.getRow();
    }
    public int getColoumn(){
        return super.getColoumn();
    }
    public ArrayList get_Matrix_type(){
        return super.get_Matrix_type();
    }
    @Override
    public void get_Row_mean(){
        for(int i = 0;i< super.getArray().length;i++){
            System.out.print("Mean of row"+(i+1)+": ");
            System.out.print(super.getArray()[i]/getRow());
            System.out.println();
        }
    }
    @Override
    public void get_Coloumn_mean(){
        for(int i = 0;i< super.getArray().length;i++){
            System.out.print("Mean of coloumn"+(i+1)+": ");
            System.out.print(super.getArray()[i]/getRow());
            System.out.println();
        }
    }
    @Override
    public double[][] transpose_1(){
        double[][] d = new double[this.getRow()][this.getColoumn()];
        for(int i = 0;i<this.getRow();i++){
            for(int j = 0;j<this.getColoumn();j++){
                if(i!=j){
                    d[i][j] = 0;
                }
                else{
                    d[i][j] = super.getArray()[i];
                }
            }
        }
        return d;
    }
    @Override
    public void Total_mean(){
        System.out.print("Mean: ");
        double mean = 0;
        for(int i = 0;i< super.getArray().length;i++){
            mean += super.getArray()[i];
        }
        System.out.println(mean/(getColoumn()*getRow()));
    }
    @Override
    double[][] compute_transpose_addition(){
        double[][] arr3 = new double[getRow()][getColoumn()];
        double[] a = getArray();
        for(int i = 0;i<a.length;i++){
            for(int j = 0;j<a.length;j++){
                if(i==j){
                    arr3[i][j]= a[i]+a[i];
                }
                else{
                    arr3[i][j]= 0;
                }
            }
        }
        return arr3;
    }
    @Override
    double[][] adj_2(){
        double[][] adj = new double[2][2];
        adj[0][0] = super.getArray()[1];
        adj[1][1] = super.getArray()[0];
        adj[0][1] = 0;
        adj[1][0] = 0;
        return adj;
    }
    @Override
    double[][] adj_3(){
        double[][] adj = new double[3][3];
        double det1 = super.getArray()[1]*super.getArray()[2];
        double det2 = 0;
        double det3 = 0;
        double det4 = 0;
        double det5 = (super.getArray()[0]*super.getArray()[2]);
        double det6 = 0;
        double det7 = 0;
        double det8 = 0;
        double det9 = (super.getArray()[0]*super.getArray()[1]);
        adj[0][0] = det1;
        adj[0][1] = det2;
        adj[0][2] = det3;
        adj[1][0] = det4;
        adj[1][1] = det5;
        adj[1][2] = det6;
        adj[2][0] = det7;
        adj[2][1] = det8;
        adj[2][2] = det9;
        return adj;
    }
    @Override
    double determinant(){
        if(getRow()==2){
            return (super.getArray()[0])*(super.getArray()[1]);
        }
        else if(getRow()==3){
            return (super.getArray()[0])*(super.getArray()[1])*(super.getArray()[2]);
        }
        return 0;
    }
    double[][] inverse_2(){
        return super.inverse_2();
    }
    @Override
    double[][] add(Matrix m1){
        if(this.getRow()==m1.getRow() && this.getColoumn()==m1.getColoumn()){
            double[] arr1 = this.getArray();
            boolean flag1 = true;
            boolean flag2 = true;
            boolean flag3 = true;
            boolean flag4 = true;
            boolean flag5 = true;
            for(int i = 0;i<m1.get_Matrix_type().size();i++){
                if(m1.get_Matrix_type().get(i).equals("Diagonal Matrix")){
                    flag1 = false;
                }
                if(m1.get_Matrix_type().get(i).equals("Scalar Matrix")){
                    flag2 = false;
                }
                if(m1.get_Matrix_type().get(i).equals("Identity Matrix")){
                    flag3 = false;
                }
                if(m1.get_Matrix_type().get(i).equals("Ones Matrix")){
                    flag4 = false;
                }
                if(m1.get_Matrix_type().get(i).equals("Null Matrix")){
                    flag5 = false;
                }
            }

            double[][] arr3 = new double[this.getRow()][this.getColoumn()];
            if(!flag5){
                for(int i = 0;i<this.getRow();i++){
                    for(int j = 0;j<this.getColoumn();j++){
                        if(i==j){
                            arr3[i][j] = arr1[i];
                        }
                        else{
                            arr3[i][j] = 0;
                        }
                    }
                }
            }
            else if(!flag4){
                for(int i = 0;i<this.getRow();i++){
                    for(int j = 0;j<this.getColoumn();j++){
                        if(i==j){
                            arr3[i][j] = arr1[i]+1;
                        }
                        else{
                            arr3[i][j] = 1;
                        }
                    }
                }
            }
            else if(!flag3){
                for(int i = 0;i<this.getRow();i++){
                    for(int j = 0;j<this.getColoumn();j++){
                        if(i==j){
                            arr3[i][j] = arr1[i]+1;
                        }
                        else{
                            arr3[i][j] = 0;
                        }
                    }
                }
            }
            else if(!flag2){
                double arr2 = m1.get_intArr();
                for(int i = 0;i<this.getRow();i++){
                    for(int j = 0;j<this.getColoumn();j++){
                        if(i==j){
                            arr3[i][j] = arr1[i]+arr2;
                        }
                        else{
                            arr3[i][j] = 0;
                        }
                    }
                }
            }
            else if(!flag1){
                double[] arr2 = m1.getArray();
                for(int i = 0;i<this.getRow();i++){
                    for(int j = 0;j<this.getColoumn();j++){
                        if(i==j){
                            arr3[i][j] = arr1[i]+arr2[i];
                        }
                        else{
                            arr3[i][j] = 0;
                        }
                    }
                }
            }
            else{
                double[][] arr2 = m1.getArr();
                for(int i = 0;i<this.getRow();i++){
                    for(int j = 0;j<this.getColoumn();j++){
                        if(i==j){
                            arr3[i][j] = arr1[i]+arr2[i][j];
                        }
                        else{
                            arr3[i][j] = arr2[i][j];
                        }
                    }
                }
            }
            return arr3;
        }
        else{
            System.out.println("These matrices cannot be added");
            return null;
        }
    }
    @Override
    double[][] sub(Matrix m1){
        if(this.getRow()==m1.getRow() && this.getColoumn()==m1.getColoumn()){
            double[] arr1 = this.getArray();
            boolean flag1 = true;
            boolean flag2 = true;
            boolean flag3 = true;
            boolean flag4 = true;
            boolean flag5 = true;
            for(int i = 0;i<m1.get_Matrix_type().size();i++){
                if(m1.get_Matrix_type().get(i).equals("Diagonal Matrix")){
                    flag1 = false;
                }
                if(m1.get_Matrix_type().get(i).equals("Scalar Matrix")){
                    flag2 = false;
                }
                if(m1.get_Matrix_type().get(i).equals("Identity Matrix")){
                    flag3 = false;
                }
                if(m1.get_Matrix_type().get(i).equals("Ones Matrix")){
                    flag4 = false;
                }
                if(m1.get_Matrix_type().get(i).equals("Null Matrix")){
                    flag5 = false;
                }
            }
            double[][] arr3 = new double[this.getRow()][this.getColoumn()];
            if(!flag5){
                for(int i = 0;i<this.getRow();i++){
                    for(int j = 0;j<this.getColoumn();j++){
                        if(i==j){
                            arr3[i][j] = arr1[i];
                        }
                        else{
                            arr3[i][j] = 0;
                        }
                    }
                }
            }
            else if(!flag4){
                for(int i = 0;i<this.getRow();i++){
                    for(int j = 0;j<this.getColoumn();j++){
                        if(i==j){
                            arr3[i][j] = arr1[i]-1;
                        }
                        else{
                            arr3[i][j] = -1;
                        }
                    }
                }
            }
            else if(!flag3){
                for(int i = 0;i<this.getRow();i++){
                    for(int j = 0;j<this.getColoumn();j++){
                        if(i==j){
                            arr3[i][j] = arr1[i]-1;
                        }
                        else{
                            arr3[i][j] = 0;
                        }
                    }
                }
            }
            else if(!flag2){
                double arr2 = m1.get_intArr();
                for(int i = 0;i<this.getRow();i++){
                    for(int j = 0;j<this.getColoumn();j++){
                        if(i==j){
                            arr3[i][j] = arr1[i]-arr2;
                        }
                        else{
                            arr3[i][j] = 0;
                        }
                    }
                }
            }
            else if(!flag1){
                double[] arr2 = m1.getArray();
                for(int i = 0;i<this.getRow();i++){
                    for(int j = 0;j<this.getColoumn();j++){
                        if(i==j){
                            arr3[i][j] = arr1[i]-arr2[i];
                        }
                        else{
                            arr3[i][j] = 0;
                        }
                    }
                }
            }
            else{
                double[][] arr2 = m1.getArr();
                for(int i = 0;i<this.getRow();i++){
                    for(int j = 0;j<this.getColoumn();j++){
                        if(i==j){
                            arr3[i][j] = arr1[i]-arr2[i][j];
                        }
                        else{
                            arr3[i][j] = -arr2[i][j];
                        }
                    }
                }
            }
            return arr3;
        }
        else{
            System.out.println("These matrices cannot be subtracted");
            return null;
        }
    }
    @Override
    double[][] mul(Matrix m1){
        double[] arr1 = this.getArray();
        if(this.getColoumn()==m1.getRow()){
            boolean flag1 = true;
            boolean flag2 = true;
            boolean flag3 = true;
            boolean flag4 = true;
            boolean flag5 = true;
            for(int i = 0;i<m1.get_Matrix_type().size();i++){
                if(m1.get_Matrix_type().get(i).equals("Diagonal Matrix")){
                    flag1 = false;
                }
                if(m1.get_Matrix_type().get(i).equals("Scalar Matrix")){
                    flag2 = false;
                }
                if(m1.get_Matrix_type().get(i).equals("Identity Matrix")){
                    flag3 = false;
                }
                if(m1.get_Matrix_type().get(i).equals("Ones Matrix")){
                    flag4 = false;
                }
                if(m1.get_Matrix_type().get(i).equals("Null Matrix")){
                    flag5 = false;
                }
            }
            double[][] arr3 = new double[this.getRow()][m1.getColoumn()];
            if(!flag5){
                for(int i = 0;i<this.getRow();i++){
                    for(int j = 0;j<m1.getColoumn();j++) {
                        arr3[i][j] = 0;
                    }
                }
            }
            else if(!flag4){
                for(int i = 0;i<this.getRow();i++){
                    for(int j = 0;j<m1.getColoumn();j++) {
                        arr3[i][j] += arr1[i];
                    }
                }
            }
            else if(!flag3){
                for(int i = 0;i<this.getRow();i++){
                    for(int j = 0;j<m1.getColoumn();j++) {
                        if(i==j){
                            arr3[i][j] += arr1[i];
                        }
                        else{
                            arr3[i][j] = 0;
                        }
                    }
                }
            }
            else if(!flag2){
                double arr2 = m1.get_intArr();
                for(int i = 0;i<this.getRow();i++){
                    for(int j = 0;j<m1.getColoumn();j++) {
                        if(i==j){
                            arr3[i][j] += arr1[i]*arr2;
                        }
                        else{
                            arr3[i][j] = 0;
                        }
                    }
                }
            }
            else if(!flag1){
                double[] arr2 = m1.getArray();
                for(int i = 0;i<this.getRow();i++){
                    for(int j = 0;j<m1.getColoumn();j++) {
                        if(i==j){
                            arr3[i][j] += arr1[i]*arr2[j];
                        }
                        else{
                            arr3[i][j] = 0;
                        }
                    }
                }
            }
            else{
                double[][] arr2 = m1.getArr();
                for(int i = 0;i<this.getRow();i++){
                    for(int j = 0;j<m1.getColoumn();j++) {
                        arr3[i][j] += arr1[i]*arr2[i][j];
                    }
                }
            }
            return arr3;
        }
        else{
            System.out.println("Matrices cannot be multiplied");
            return null;
        }
    }
    @Override
    double[][] mul_1(Matrix m1){
        if(this.getRow()==m1.getRow() && this.getColoumn()==m1.getColoumn()){
            boolean flag1 = true;
            boolean flag2 = true;
            boolean flag3 = true;
            boolean flag4 = true;
            boolean flag5 = true;
            for(int i = 0;i<m1.get_Matrix_type().size();i++){
                if(m1.get_Matrix_type().get(i).equals("Diagonal Matrix")){
                    flag1 = false;
                }
            }
            for(int i = 0;i<m1.get_Matrix_type().size();i++){
                if(m1.get_Matrix_type().get(i).equals("Scalar Matrix")){
                    flag2 = false;
                }
            }
            for(int i = 0;i<m1.get_Matrix_type().size();i++){
                if(m1.get_Matrix_type().get(i).equals("Identity Matrix")){
                    flag3 = false;
                }
            }
            for(int i = 0;i<m1.get_Matrix_type().size();i++){
                if(m1.get_Matrix_type().get(i).equals("Ones Matrix")){
                    flag4 = false;
                }
            }
            for(int i = 0;i<m1.get_Matrix_type().size();i++){
                if(m1.get_Matrix_type().get(i).equals("Null Matrix")){
                    flag5 = false;
                }
            }
            double[][] arr3 = new double[this.getRow()][this.getColoumn()];
            if(!flag5){
                for(int i = 0;i<this.getRow();i++){
                    for(int j =0;j<this.getColoumn();j++){
                        arr3[i][j] = 0;
                    }
                }
            }
            else if(!flag4){
                for(int i = 0;i<this.getRow();i++){
                    for(int j =0;j<this.getColoumn();j++){
                        if(i==j){
                            arr3[i][j] = this.getArray()[i];
                        }
                        else{
                            arr3[i][j] = 0;
                        }
                    }
                }
            }
            else if(!flag3){
                for(int i = 0;i<this.getRow();i++){
                    for(int j =0;j<this.getColoumn();j++){
                        if(i==j){
                            arr3[i][j] = this.getArray()[i];
                        }
                        else{
                            arr3[i][j] = 0;
                        }
                    }
                }
            }
            else if(!flag2){
                double arr2 = m1.get_intArr();
                for(int i = 0;i<this.getRow();i++){
                    for(int j =0;j<this.getColoumn();j++){
                        if(i==j){
                            arr3[i][j] = this.getArray()[i]*arr2;
                        }
                        else{
                            arr3[i][j] = 0;
                        }
                    }
                }
            }
            else if(!flag1){
                double[] arr2 = m1.getArray();
                for(int i = 0;i<this.getRow();i++){
                    for(int j =0;j<this.getColoumn();j++){
                        if(i==j){
                            arr3[i][j] = this.getArray()[i]*arr2[i];
                        }
                        else{
                            arr3[i][j] = 0;
                        }
                    }
                }
            }
            else{
                double[] arr1 = this.getArray();
                double[][] arr2 = m1.getArr();
                for(int i = 0;i<this.getRow();i++){
                    for(int j =0;j<this.getColoumn();j++){
                        if (i == j) {
                            arr3[i][j] = arr1[i]*arr2[i][j];
                        }
                        else{
                            arr3[i][j] = 0;
                        }
                    }
                }
            }
            return arr3;
        }
        System.out.println("Cannot be multiplied");
        return null;
    }
    @Override
    double[][] div_1(Matrix m1){
        if(this.getRow()==m1.getRow() && this.getColoumn()==m1.getColoumn()){
            boolean flag1 = true;
            boolean flag2 = true;
            boolean flag3 = true;
            boolean flag4 = true;
            boolean flag5 = true;
            for(int i = 0;i<m1.get_Matrix_type().size();i++){
                if(m1.get_Matrix_type().get(i).equals("Diagonal Matrix")){
                    flag1 = false;
                }
            }
            for(int i = 0;i<m1.get_Matrix_type().size();i++){
                if(m1.get_Matrix_type().get(i).equals("Scalar Matrix")){
                    flag2 = false;
                }
            }
            for(int i = 0;i<m1.get_Matrix_type().size();i++){
                if(m1.get_Matrix_type().get(i).equals("Identity Matrix")){
                    flag3 = false;
                }
            }
            for(int i = 0;i<m1.get_Matrix_type().size();i++){
                if(m1.get_Matrix_type().get(i).equals("Ones Matrix")){
                    flag4 = false;
                }
            }
            for(int i = 0;i<m1.get_Matrix_type().size();i++){
                if(m1.get_Matrix_type().get(i).equals("Null Matrix")){
                    flag5 = false;
                }
            }
            double[][] arr3 = new double[this.getRow()][this.getColoumn()];
            if(!flag5){
                System.out.println("Division by zero not possible: ERROR");
            }
            else if(!flag4){
                for(int i = 0;i<this.getRow();i++){
                    for(int j =0;j<this.getColoumn();j++){
                        if(i==j){
                            arr3[i][j] = this.getArray()[i];
                        }
                        else{
                            arr3[i][j] = 0;
                        }
                    }
                }
            }
            else if(!flag3){
                System.out.println("Division by zero not possible: ERROR");
            }
            else if(!flag2){
                System.out.println("Division by zero not possible: ERROR");
            }
            else if(!flag1){
                System.out.println("Division by zero not possible: ERROR");
            }
            else{
                double[] arr1 = this.getArray();
                double[][] arr2 = m1.getArr();
                boolean pres = true;
                for(int i = 0;i<this.getRow();i++){
                    for(int j =0;j<this.getColoumn();j++){
                        if (i == j) {
                            if(arr2[i][j]!=0) {
                                arr3[i][j] = arr1[i]/arr2[i][j];
                            }
                            else{
                                pres = false;
                            }
                        }
                        else{
                            if(arr2[i][j]!=0){
                                arr3[i][j] = 0;
                            }
                            else{
                                pres = false;
                            }
                        }
                    }
                }
                if(!pres) {
                    System.out.println("Division by zero not possible: ERROR");
                    return null;
                }
            }
            return arr3;
        }
        System.out.println("Cannot be divided");
        return null;
    }

    ArrayList eigenvalue(){
        return super.eigenvalue();
    }
    double[][] eigenvector(){
        return super.eigenvector();
    }
}
public class Main {
    public static void main(String[] args) {
        boolean flag = true;
        Scanner sc = new Scanner(System.in);
        ArrayList<Matrix> matrices = new ArrayList();
        while(flag){
            printMenu();
            int x = sc.nextInt();
            if(x==1){
                System.out.println("Enter name");
                String name = sc.next();
                boolean flag1 = true;
                for(int i = 0;i<matrices.size();i++){
                    if(matrices.get(i).getName().equals(name)){
                        flag1 = false;
                    }
                }
                if(flag1){
                    System.out.println("Enter no. of rows: ");
                    int row = sc.nextInt();
                    System.out.println("Enter no. of coloumns: ");
                    int coloumn = sc.nextInt();
                    double[][] arr = new double[row][coloumn];
                    System.out.println("Enter elements of matrix");
                    for(int i = 0;i<row;i++){
                        System.out.println("Enter elements of "+(i+1)+"th row");
                        for(int j = 0;j<coloumn;j++){
                            arr[i][j] = sc.nextDouble();
                        }
                    }
                    Matrix m = new Matrix(row,coloumn,arr,name);
                    Matrix x1 = m.set_Matrix();
                    matrices.add(x1);
                }
                else{
                    System.out.println("Same name cannot be used");
                }


            }
            if(x==2){
                System.out.println("Enter name");
                String name = sc.next();
                Matrix x1 = null;
                for(int i = 0;i<matrices.size();i++){
                    if(matrices.get(i).getName().equals(name)){
                        x1 = matrices.get(i);
                    }
                }
                System.out.println("Enter row of element to be changed:");
                int r = sc.nextInt();
                System.out.println("Enter coloumn of element to be changed:");
                int c = sc.nextInt();
                boolean flag1 = true;
                boolean flag2 = true;
                boolean flag3 = true;
                boolean flag4 = true;
                boolean flag5 = true;
                for(int i = 0;i<x1.get_Matrix_type().size();i++){
                    if(x1.get_Matrix_type().get(i).equals("Diagonal Matrix")){
                        flag1 = false;
                    }
                }
                Matrix x2;
                if(!flag1 && r==c){
                    System.out.println("Enter element to be replaced with:");
                    double rep = sc.nextDouble();
                    double[] arr = x1.getArray();
                    arr[r-1] = rep;
                    double[][] arr1 = new double[x1.getRow()][x1.getColoumn()];
                    for(int i = 0;i<x1.getRow();i++){
                        for(int j = 0;j<x1.getColoumn();j++){
                            if(i==j){
                                arr1[i][j] = arr[i];
                            }
                        }
                    }
                    Matrix m = new Matrix(x1.getRow(),x1.getColoumn(),arr1,name);
                    x2 = m.set_Matrix();
                }
                else{
                    double[][] arr= x1.getArr();
                    System.out.println("Enter element to be replaced with:");
                    double rep = sc.nextDouble();
                    arr[r-1][c-1] = rep;
                    Matrix m = new Matrix(x1.getRow(),x1.getColoumn(),arr,name);
                    x2 = m.set_Matrix();
                }

                for(int i = 0;i<matrices.size();i++){
                    if(matrices.get(i).getName().equals(name)){
                        matrices.set(i,x2);
                        System.out.println("Matrice changed");
                    }
                }
            }
            if(x==3){
                System.out.println("----------------");
                System.out.println("1. Addition");
                System.out.println("2. Subtraction");
                System.out.println("3. Multiplication");
                System.out.println("4. Division");

                int inp = sc.nextInt();

                if(inp==1){
                    System.out.println("Enter name of matrix1");
                    String name1 = sc.next();
                    System.out.println("Enter name of matrix2");
                    String name2 = sc.next();
                    Matrix x1 = null;
                    Matrix x2 = null;
                    for(int i = 0;i<matrices.size();i++){
                        if(matrices.get(i).getName().equals(name1)){
                            x1 = matrices.get(i);
                        }
                        if(matrices.get(i).getName().equals(name2)){
                            x2 = matrices.get(i);
                        }
                    }
                    double[][] x3 = x1.add(x2);
                    if(x3!=null){
                        for(int i = 0;i<x3.length;i++){
                            for(int j = 0;j<x3[i].length;j++){
                                System.out.print(x3[i][j]+" | ");
                            }
                            System.out.println();
                        }
                    }
                }
                if(inp==2){
                    System.out.println("Enter name of matrix1");
                    String name1 = sc.next();
                    System.out.println("Enter name of matrix2");
                    String name2 = sc.next();
                    Matrix x1 = null;
                    Matrix x2 = null;
                    for(int i = 0;i<matrices.size();i++){
                        if(matrices.get(i).getName().equals(name1)){
                            x1 = matrices.get(i);
                        }
                        if(matrices.get(i).getName().equals(name2)){
                            x2 = matrices.get(i);
                        }
                    }
                    double[][] x3 = x1.sub(x2);
                    if(x3!=null){
                        for(int i = 0;i<x3.length;i++){
                            for(int j = 0;j<x3[i].length;j++){
                                System.out.print(x3[i][j]+" | ");
                            }
                            System.out.println();
                        }
                    }
                }
                if(inp==3){

                    System.out.println("Enter name of matrix1");
                    String name1 = sc.next();
                    System.out.println("Enter name of matrix2");
                    String name2 = sc.next();
                    Matrix x1 = null;
                    Matrix x2 = null;
                    for(int i = 0;i<matrices.size();i++){
                        if(matrices.get(i).getName().equals(name1)){
                            x1 = matrices.get(i);
                        }
                        if(matrices.get(i).getName().equals(name2)){
                            x2 = matrices.get(i);
                        }
                    }
                    double[][] x3 = x1.mul(x2);
                    if(x3!=null){
                        for(int i = 0;i<x3.length;i++){
                            for(int j = 0;j<x3[i].length;j++){
                                System.out.print(x3[i][j]+" | ");
                            }
                            System.out.println();
                        }
                    }
                }
                if(inp==4){

                    System.out.println("Enter name of matrix1");
                    String name1 = sc.next();
                    System.out.println("Enter name of matrix2");
                    String name2 = sc.next();
                    Matrix x1 = null;
                    Matrix x2 = null;
                    for(int i = 0;i<matrices.size();i++){
                        if(matrices.get(i).getName().equals(name1)){
                            x1 = matrices.get(i);
                        }
                        if(matrices.get(i).getName().equals(name2)){
                            x2 = matrices.get(i);
                        }
                    }
                    double[][] arr2 = x2.inverse_2();
                    if(arr2!=null){
                        Matrix x3 = new Matrix(x2.getRow(),x2.getColoumn(),arr2,x2.getName()+"_inv");
                        Matrix x5 = x3.set_Matrix();
                        double[][] x4 = x1.mul(x5);
                        if(x4!=null){
                            for(int i = 0;i<x4.length;i++){
                                for(int j = 0;j<x4[i].length;j++){
                                    System.out.print(x4[i][j]+" | ");
                                }
                                System.out.println();
                            }
                        }
                    }
                    else{
                        System.out.println("Cannot perform operation");
                    }
                }
            }
            if(x==4){
                System.out.println("----------------");
                System.out.println("1. Element wise Addition");
                System.out.println("2. Element wise Subtraction");
                System.out.println("3. Element wise Multiplication");
                System.out.println("4. Element wise Division");

                int n = sc.nextInt();
                if(n==1){

                    System.out.println("Enter name of matrix1");
                    String name1 = sc.next();
                    System.out.println("Enter name of matrix2");
                    String name2 = sc.next();
                    Matrix x1 = null;
                    Matrix x2 = null;
                    for(int i = 0;i<matrices.size();i++){
                        if(matrices.get(i).getName().equals(name1)){
                            x1 = matrices.get(i);
                        }
                        if(matrices.get(i).getName().equals(name2)){
                            x2 = matrices.get(i);
                        }
                    }
                    double[][] x3 = x1.add(x2);
                    if(x3!=null){
                        for(int i = 0;i<x3.length;i++){
                            for(int j = 0;j<x3[i].length;j++){
                                System.out.print(x3[i][j]+" | ");
                            }
                            System.out.println();
                        }
                    }
                }
                if(n==2){

                    System.out.println("Enter name of matrix1");
                    String name1 = sc.next();
                    System.out.println("Enter name of matrix2");
                    String name2 = sc.next();
                    Matrix x1 = null;
                    Matrix x2 = null;
                    for(int i = 0;i<matrices.size();i++){
                        if(matrices.get(i).getName().equals(name1)){
                            x1 = matrices.get(i);
                        }
                        if(matrices.get(i).getName().equals(name2)){
                            x2 = matrices.get(i);
                        }
                    }
                    double[][] x3 = x1.sub(x2);
                    if(x3!=null){
                        for(int i = 0;i<x3.length;i++){
                            for(int j = 0;j<x3[i].length;j++){
                                System.out.print(x3[i][j]+" | ");
                            }
                            System.out.println();
                        }
                    }
                }
                if(n==3){

                    System.out.println("Enter name of matrix1");
                    String name1 = sc.next();
                    System.out.println("Enter name of matrix2");
                    String name2 = sc.next();
                    Matrix x1 = null;
                    Matrix x2 = null;
                    for(int i = 0;i<matrices.size();i++){
                        if(matrices.get(i).getName().equals(name1)){
                            x1 = matrices.get(i);
                        }
                        if(matrices.get(i).getName().equals(name2)){
                            x2 = matrices.get(i);
                        }
                    }
                    double[][] x3 = x1.mul_1(x2);
                    if(x3!=null){
                        for(int i = 0;i<x3.length;i++){
                            for(int j = 0;j<x3[i].length;j++){
                                System.out.print(x3[i][j]+" | ");
                            }
                            System.out.println();
                        }
                    }
                }
                if(n==4){

                    System.out.println("Enter name of matrix1");
                    String name1 = sc.next();
                    System.out.println("Enter name of matrix2");
                    String name2 = sc.next();
                    Matrix x1 = null;
                    Matrix x2 = null;
                    for(int i = 0;i<matrices.size();i++){
                        if(matrices.get(i).getName().equals(name1)){
                            x1 = matrices.get(i);
                        }
                        if(matrices.get(i).getName().equals(name2)){
                            x2 = matrices.get(i);
                        }
                    }
                    double[][] x3 = x1.div_1(x2);
                    if(x3!=null){
                        for(int i = 0;i<x3.length;i++){
                            for(int j = 0;j<x3[i].length;j++){
                                System.out.print(x3[i][j]+" | ");
                            }
                            System.out.println();
                        }
                    }
                }
            }
            if(x==5){
                System.out.println("Enter name of Matrix: ");
                String name = sc.next();
                Matrix x1 = null;
                for(int i = 0;i<matrices.size();i++){
                    if(matrices.get(i).getName().equals(name)){
                        x1 = matrices.get(i);
                    }
                }
                double[][] tran= x1.transpose_1();
                if(tran!=null){
                    for(int i = 0;i<tran.length;i++){
                        for(int j = 0;j<tran[i].length;j++){
                            System.out.print(tran[i][j]+" | ");
                        }
                        System.out.println();
                    }
                    System.out.println("Matrice transposed");
                }
                else{
                    System.out.println("Matrice not transposed");
                }
            }
            if(x==6){
                System.out.println("Enter name of Matrix: ");
                String name = sc.next();
                Matrix x1 = null;
                for(int i = 0;i<matrices.size();i++){
                    if(matrices.get(i).getName().equals(name)){
                        x1 = matrices.get(i);
                    }
                }
                double[][] inv = x1.inverse_2();
                if(inv!=null){
                    for(int i = 0;i< inv.length;i++){
                        for(int j = 0;j<inv[i].length;j++){
                            System.out.print(inv[i][j]+" | ");
                        }
                        System.out.println();
                    }
                }
                else{
                    System.out.println("Cannot be inversed");
                }
            }
            if(x==7){
                System.out.println("----------------");
                System.out.println("1. Row-wise mean");
                System.out.println("2. Coloumn-wise mean");
                System.out.println("3. Mean of all elements");

                int n = sc.nextInt();
                if(n==1){
                    System.out.println("Enter name of Matrix: ");
                    String name = sc.next();
                    Matrix x1 = null;
                    for(int i = 0;i<matrices.size();i++){
                        if(matrices.get(i).getName().equals(name)){
                            x1 = matrices.get(i);
                        }
                    }
                    x1.get_Row_mean();
                }
                if(n==2){
                    System.out.println("Enter name of Matrix: ");
                    String name = sc.next();
                    Matrix x1 = null;
                    for(int i = 0;i<matrices.size();i++){
                        if(matrices.get(i).getName().equals(name)){
                            x1 = matrices.get(i);
                        }
                    }
                    x1.get_Coloumn_mean();
                }
                if(n==3){
                    System.out.println("Enter name of Matrix: ");
                    String name = sc.next();
                    Matrix x1 = null;
                    for(int i = 0;i<matrices.size();i++){
                        if(matrices.get(i).getName().equals(name)){
                            x1 = matrices.get(i);
                        }
                    }
                    x1.Total_mean();
                }
            }
            if(x==8){
                System.out.println("Enter id:");
                String name = sc.next();
                Matrix x1 = null;
                for(int i= 0;i<matrices.size();i++){
                    if(matrices.get(i).getName().equals(name)){
                        x1 = matrices.get(i);
                    }
                }
                if(x1.getRow()==x1.getColoumn()){
                    System.out.println(x1.determinant());
                }
                else{
                    System.out.println("Cannot compute determinant");
                }
            }
            if(x==9){
                System.out.println("Enter name of Matrix: ");
                String name = sc.next();
                Matrix x1 = null;
                for(int i = 0;i<matrices.size();i++){
                    if(matrices.get(i).getName().equals(name)){
                        x1 = matrices.get(i);
                    }
                }
                if(x1!=null){
                    ArrayList A = x1.get_Matrix_type();
                    for(int i = 0;i<A.size();i++){
                        System.out.println(A.get(i));
                    }
                }
                else{
                    System.out.println("Matrice not found");
                }
            }
            if(x==10){
                System.out.println("Enter name of Matrix: ");
                String name = sc.next();
                Matrix x1 = null;
                for(int i = 0;i<matrices.size();i++){
                    if(matrices.get(i).getName().equals(name)){
                        x1 = matrices.get(i);
                    }
                }
                if(x1.getRow()==x1.getColoumn()){
                    double[][] add = x1.compute_transpose_addition();
                    if(add!=null){
                        for(int i = 0;i<add.length;i++){
                            for(int j = 0;j<add[i].length;j++){
                                System.out.print(add[i][j]+" | ");
                            }
                            System.out.println();
                        }
                    }
                }
                else{
                    System.out.println("Transpose addition cannot happen");
                }
            }
            if(x==11){
                System.out.println("Enter name of Matrix: ");
                String name = sc.next();
                Matrix x1 = null;
                for(int i = 0;i<matrices.size();i++){
                    if(matrices.get(i).getName().equals(name)){
                        x1 = matrices.get(i);
                    }
                }
                ArrayList c = x1.eigenvalue();
                if(c!=null){
                    for(int i = 0;i<c.size();i++){
                        System.out.print(c.get(i)+" ");
                    }
                }
                System.out.println();
            }
            if(x==12){
                System.out.println("Enter name of Matrix: ");
                String name = sc.next();
                Matrix x1 = null;
                for(int i = 0;i<matrices.size();i++){
                    if(matrices.get(i).getName().equals(name)){
                        x1 = matrices.get(i);
                    }
                }
                double[][] c = x1.eigenvector();
                if(c!=null){
                    for(int i = 0;i<c.length;i++){
                        for(int j = 0;j<c[i].length;j++){
                            System.out.print(c[i][j]+" | ");
                        }
                        System.out.println();
                    }
                }
                System.out.println();
            }
            if(x==13){
                System.out.println("Enter no. of equations");
                int n = sc.nextInt();
                System.out.println("Enter no. of variables");
                int n1 = sc.nextInt();
                if(n==n1){
                    double[][] arr = new double[n][n1];
                    double[][] arr1 = new double[n][1];
                    for(int i = 0;i<n;i++){
                        System.out.println("Enter equation "+(i+1));
                        for(int j = 0;j < n1; j++){
                            System.out.println("Enter coefficient of x"+(j+1));
                            arr[i][j] = sc.nextInt();
                        }
                        System.out.println("Enter consonant");
                        arr1[i][0] = sc.nextInt();
                    }
                    Matrix m = new Matrix(n,n1,arr,"Temp");
                    Matrix m1 = new Matrix(n,1,arr1,"Temp1");
                    double[][] arr2 = m.inverse_2();
                    Matrix x3 = new Matrix(m.getRow(),m.getColoumn(),arr2,m.getName()+"_inv");
                    double[][] x4 = x3.mul(m1);
                    for(int i = 0;i<x4.length;i++){
                        for(int j = 0;j<x4[i].length;j++){
                            System.out.println("Value of x"+(i+1) +" = "+x4[i][j]);
                        }
                    }
                }
                else{
                    System.out.println("Cannot solve");
                }
            }
            if(x==14){
                System.out.print("Enter name of singleton matrice:");
                String name = sc.next();
                System.out.print("Enter name of matrice to be scaled:");
                String name1 = sc.next();
                Matrix x1 = null;
                Matrix x2 = null;
                for(int i = 0;i<matrices.size();i++){
                    if(matrices.get(i).getName().equals(name)){
                        x1 = matrices.get(i);
                    }
                    if(matrices.get(i).getName().equals(name1)){
                        x2 = matrices.get(i);
                    }
                }
                double[][] x3 = x1.scale(x2);
                if(x3!=null){
                    for(int i = 0;i<x3.length;i++){
                        for(int j = 0;j<x3[i].length;j++){
                            System.out.print(x3[i][j]+" | ");
                        }
                        System.out.println();
                    }
                }
            }
            if(x==15){
                System.out.println("Enter requested matrix-type labels");
                sc.nextLine();
                String type = sc.nextLine();
                for(int i = 0;i<matrices.size();i++){
                    for(int j = 0;j< matrices.get(i).get_Matrix_type().size();j++){
                        if(matrices.get(i).get_Matrix_type().get(j).equals(type)){
                            System.out.println(matrices.get(i).getName());
                        }
                    }
                }
            }
            if(x==16){
                System.out.println("Enter name");
                String name = sc.next();
                boolean flag1 = true;
                for(int i = 0;i<matrices.size();i++){
                    if(matrices.get(i).getName().equals(name)){
                        flag1 = false;
                    }
                }
                if(flag1){
                    print_1();
                    int inp = sc.nextInt();
                    if(inp==1){
                        System.out.println("Enter no. of rows: ");
                        int row = sc.nextInt();
                        System.out.println("Enter no. of coloumns: ");
                        int coloumn = sc.nextInt();
                        if(row!=coloumn && row!=1 && coloumn!=1){
                            double[][] arr = new double[row][coloumn];
                            System.out.println("Enter elements of matrix");
                            for(int i = 0;i<row;i++){
                                System.out.println("Enter elements of "+(i+1)+"th row");
                                for(int j = 0;j<coloumn;j++){
                                    arr[i][j] = sc.nextDouble();
                                }
                            }
                            Matrix m = new Matrix(row,coloumn,arr,name);
                            Matrix x1 = m.set_Matrix();
                            matrices.add(x1);
                        }
                        else{
                            System.out.println("Cannot form matrice");
                        }
                    }
                    if(inp==2){

                        System.out.println("Enter no. of coloumns: ");
                        int coloumn = sc.nextInt();
                        double[][] arr = new double[1][coloumn];
                        System.out.println("Enter elements of matrix");
                        for(int i = 0;i<1;i++){
                            System.out.println("Enter elements of "+(i+1)+"th row");
                            for(int j = 0;j<coloumn;j++){
                                arr[i][j] = sc.nextDouble();
                            }
                        }
                        Matrix m = new Matrix(1,coloumn,arr,name);
                        Matrix x1 = m.set_Matrix();
                        matrices.add(x1);

                    }
                    if(inp==3){
                        System.out.println("Enter no. of rows: ");
                        int row = sc.nextInt();

                        double[][] arr = new double[row][1];
                        System.out.println("Enter elements of matrix");
                        for(int i = 0;i<row;i++){
                            System.out.println("Enter elements of "+(i+1)+"th row");
                            for(int j = 0;j<1;j++){
                                arr[i][j] = sc.nextDouble();
                            }
                        }
                        Matrix m = new Matrix(row,1,arr,name);
                        Matrix x1 = m.set_Matrix();
                        matrices.add(x1);

                    }
                    if(inp==4){
                        System.out.println("Enter no. of rows: ");
                        int row = sc.nextInt();
                        System.out.println("Enter no. of coloumns: ");
                        int coloumn = sc.nextInt();
                        if(row==coloumn && row!=1){
                            double[][] arr = new double[row][coloumn];
                            System.out.println("Enter elements of matrix");
                            for(int i = 0;i<row;i++){
                                System.out.println("Enter elements of "+(i+1)+"th row");
                                for(int j = 0;j<coloumn;j++){
                                    arr[i][j] = sc.nextDouble();
                                }
                            }
                            Matrix m = new Matrix(row,coloumn,arr,name);
                            Matrix x1 = m.set_Matrix();
                            matrices.add(x1);
                        }
                        else{
                            System.out.println("Cannot form matrice");
                        }
                    }
                    if(inp==5){
                        System.out.println("Enter no. of rows: ");
                        int row = sc.nextInt();
                        System.out.println("Enter no. of coloumns: ");
                        int coloumn = sc.nextInt();
                        if(row==coloumn && row!=1){
                            double[][] arr = new double[row][coloumn];
                            if(row==2){
                                System.out.println("Enter elements of diagonal");
                                arr[0][0] = sc.nextDouble();
                                arr[1][1] = sc.nextDouble();
                                System.out.println("Enter elements of first row");
                                arr[0][0] = sc.nextDouble();
                                arr[0][1] = sc.nextDouble();
                                arr[1][0] = arr[0][1];
                            }
                            if(row==3){
                                System.out.println("Enter elements of diagonal");
                                arr[0][0] = sc.nextDouble();
                                arr[1][1] = sc.nextDouble();
                                arr[2][2] = sc.nextDouble();
                                System.out.println("Enter elements of first row");
                                arr[0][0] = sc.nextDouble();
                                arr[0][1] = sc.nextDouble();
                                arr[0][2] = sc.nextDouble();
                                arr[1][0] = arr[0][1];
                                arr[2][0] = arr[0][2];
                                System.out.println("Enter elements of last coloumn ");
                                arr[0][2] = sc.nextDouble();
                                arr[1][2] = sc.nextDouble();
                                arr[2][2] = sc.nextDouble();
                                arr[2][1] = arr[1][2];
                            }
                            Matrix m = new Matrix(row,coloumn,arr,name);
                            Matrix x1 = m.set_Matrix();
                            matrices.add(x1);
                        }
                        else{
                            System.out.println("Cannot form matrice");
                        }
                    }
                    if(inp==6){
                        System.out.println("Enter no. of rows: ");
                        int row = sc.nextInt();
                        System.out.println("Enter no. of coloumns: ");
                        int coloumn = sc.nextInt();
                        if(row==coloumn && row!=1){
                            double[][] arr = new double[row][coloumn];
                            if(row==2){
                                arr[0][0] = 0;
                                arr[1][1] = 0;
                                System.out.println("Enter elements of first row");
                                arr[0][0] = sc.nextInt();
                                arr[0][1] = sc.nextInt();
                                arr[1][0] = -arr[0][1];
                            }
                            if(row==3){
                                arr[0][0] = 0;
                                arr[1][1] = 0;
                                arr[2][2] = 0;
                                System.out.println("Enter elements of first row");
                                arr[0][0] = sc.nextDouble();
                                arr[0][1] = sc.nextDouble();
                                arr[0][2] = sc.nextDouble();
                                arr[1][0] = -arr[0][1];
                                arr[2][0] = -arr[0][2];
                                System.out.println("Enter elements of last coloumn ");
                                arr[0][2] = sc.nextDouble();
                                arr[1][2] = sc.nextDouble();
                                arr[2][2] = sc.nextDouble();
                                arr[2][1] = -arr[1][2];
                            }
                            Matrix m = new Matrix(row,coloumn,arr,name);
                            Matrix x1 = m.set_Matrix();
                            matrices.add(x1);
                        }
                        else{
                            System.out.println("Cannot form matrice");
                        }
                    }
                    if(inp==7){
                        System.out.println("Enter no. of rows: ");
                        int row = sc.nextInt();
                        System.out.println("Enter no. of coloumns: ");
                        int coloumn = sc.nextInt();
                        if(row==coloumn && row!=1){
                            double[][] arr = new double[row][coloumn];
                            System.out.println("Enter elements of matrix");
                            for(int i = 0;i<row;i++){
                                System.out.println("Enter elements of "+(i+1)+"th row");
                                for(int j = 0;j<coloumn;j++){
                                    arr[i][j] = sc.nextDouble();
                                }
                            }
                            Matrix m = new Matrix(row,coloumn,arr,name);
                            Matrix x1 = m.set_Matrix();
                            matrices.add(x1);
                        }
                        else{
                            System.out.println("Cannot form matrice");
                        }
                    }
                    if(inp==8){
                        System.out.println("Enter no. of rows: ");
                        int row = sc.nextInt();
                        System.out.println("Enter no. of coloumns: ");
                        int coloumn = sc.nextInt();
                        if(row==coloumn && row!=1){
                            double[][] arr = new double[row][coloumn];
                            System.out.println("Enter elements of matrix");
                            for(int i = 0;i<row;i++){
                                System.out.println("Enter elements of "+(i+1)+"th row");
                                for(int j = 0;j<coloumn;j++){
                                    arr[i][j] = sc.nextDouble();
                                }
                            }
                            Matrix m = new Matrix(row,coloumn,arr,name);
                            Matrix x1 = m.set_Matrix();
                            matrices.add(x1);
                        }
                        else{
                            System.out.println("Cannot form matrice");
                        }
                    }
                    if(inp==9){
                        System.out.println("Enter no. of rows: ");
                        int row = sc.nextInt();
                        System.out.println("Enter no. of coloumns: ");
                        int coloumn = sc.nextInt();
                        if(row==coloumn && row!=1){
                            double[][] arr = new double[row][coloumn];
                            System.out.println("Enter elements of matrix");
                            for(int i = 0;i<row;i++){
                                System.out.println("Enter elements of "+(i+1)+"th row");
                                for(int j = 0;j<coloumn;j++){
                                    arr[i][j] = sc.nextDouble();
                                }
                            }
                            Matrix m = new Matrix(row,coloumn,arr,name);
                            Matrix x1 = m.set_Matrix();
                            matrices.add(x1);
                        }
                        else{
                            System.out.println("Cannot form matrice");
                        }
                    }
                    if(inp==10){
                        System.out.println("Enter no. of rows: ");
                        int row = sc.nextInt();
                        System.out.println("Enter no. of coloumns: ");
                        int coloumn = sc.nextInt();
                        if(row==coloumn && row!=1){
                            double[][] arr = new double[row][coloumn];
                            if(row==2){
                                System.out.println("Enter elements of diagonal");
                                arr[0][0] = sc.nextDouble();
                                arr[1][1] = sc.nextDouble();

                                arr[0][1] = 0;
                                arr[1][0] = 0;
                            }
                            if(row==3){
                                System.out.println("Enter elements of diagonal");
                                arr[0][0] = sc.nextDouble();
                                arr[1][1] = sc.nextDouble();
                                arr[2][2] = sc.nextDouble();

                                arr[0][1] = 0;
                                arr[0][2] = 0;
                                arr[1][0] = 0;
                                arr[2][0] = 0;

                                arr[1][2] = 0;
                                arr[2][1] = 0;
                            }
                            Matrix m = new Matrix(row,coloumn,arr,name);
                            Matrix x1 = m.set_Matrix();
                            matrices.add(x1);
                        }
                        else{
                            System.out.println("Cannot form matrice");
                        }
                    }
                    if(inp==11){
                        System.out.println("Enter no. of rows: ");
                        int row = sc.nextInt();
                        System.out.println("Enter no. of coloumns: ");
                        int coloumn = sc.nextInt();
                        if(row==coloumn && row!=1){
                            double[][] arr = new double[row][coloumn];
                            if(row==2){
                                System.out.println("Enter scalar value");
                                double s = sc.nextDouble();
                                arr[0][0] = s;
                                arr[1][1] = s;

                                arr[0][1] = 0;
                                arr[1][0] = 0;
                            }
                            if(row==3){
                                System.out.println("Enter elements of diagonal");
                                double s = sc.nextDouble();
                                arr[0][0] = s;
                                arr[1][1] = s;
                                arr[2][2] = s;

                                arr[0][1] = 0;
                                arr[0][2] = 0;
                                arr[1][0] = 0;
                                arr[2][0] = 0;

                                arr[1][2] = 0;
                                arr[2][1] = 0;
                            }
                            Matrix m = new Matrix(row,coloumn,arr,name);
                            Matrix x1 = m.set_Matrix();
                            matrices.add(x1);
                        }
                        else{
                            System.out.println("Cannot form matrice");
                        }
                    }
                    if(inp==12){
                        System.out.println("Enter no. of rows: ");
                        int row = sc.nextInt();
                        System.out.println("Enter no. of coloumns: ");
                        int coloumn = sc.nextInt();
                        if(row==coloumn && row!=1){
                            double[][] arr = new double[row][coloumn];
                            if(row==2){
                                arr[0][0] = 1;
                                arr[1][1] = 1;

                                arr[0][1] = 0;
                                arr[1][0] = 0;
                            }
                            if(row==3){

                                arr[0][0] = 1;
                                arr[1][1] = 1;
                                arr[2][2] = 1;

                                arr[0][1] = 0;
                                arr[0][2] = 0;
                                arr[1][0] = 0;
                                arr[2][0] = 0;

                                arr[1][2] = 0;
                                arr[2][1] = 0;
                            }
                            Matrix m = new Matrix(row,coloumn,arr,name);
                            Matrix x1 = m.set_Matrix();
                            matrices.add(x1);
                        }
                        else{
                            System.out.println("Cannot form matrice");
                        }
                    }
                    if(inp==13){
                        double[][] arr = new double[1][1];
                        System.out.println("Enter value:");
                        arr[0][0] = sc.nextDouble();
                        Matrix m = new Matrix(1,1,arr,name);
                        Matrix x1 = m.set_Matrix();
                        matrices.add(x1);

                    }
                    if(inp==14){
                        System.out.println("Enter no. of rows: ");
                        int row = sc.nextInt();
                        System.out.println("Enter no. of coloumns: ");
                        int coloumn = sc.nextInt();
                        double[][] arr = new double[row][coloumn];
                        for(int i = 0;i<row;i++){
                            for(int j = 0;j<coloumn;j++){
                                arr[i][j] = 1;
                            }
                        }
                        Matrix m = new Matrix(row,coloumn,arr,name);
                        Matrix x1 = m.set_Matrix();
                        matrices.add(x1);
                    }
                    if(inp==15){
                        System.out.println("Enter no. of rows: ");
                        int row = sc.nextInt();
                        System.out.println("Enter no. of coloumns: ");
                        int coloumn = sc.nextInt();
                        double[][] arr = new double[row][coloumn];
                        for(int i = 0;i<row;i++){
                            for(int j = 0;j<coloumn;j++){
                                arr[i][j] = 0;
                            }
                        }
                        Matrix m = new Matrix(row,coloumn,arr,name);
                        Matrix x1 = m.set_Matrix();
                        matrices.add(x1);
                    }
                }
                else{
                    System.out.println("Same name cannot be used");
                }
            }
            if(x==17){
                flag = false;
            }
        }

    }
    public static void printMenu(){
        System.out.println("------------------");
        System.out.println("1. Create Matrix");
        System.out.println("2. Change elements of Matrices");
        System.out.println("3. Math operations on Matrices");
        System.out.println("4. Element wise operation on matrices");
        System.out.println("5. Transpose Matrix");
        System.out.println("6. Inverse Matrix");
        System.out.println("7. Compute means");
        System.out.println("8. Compute determinants");
        System.out.println("9. Display Labels");
        System.out.println("10. A + A(T)");
        System.out.println("11. Compute Eigen Value");
        System.out.println("12. Compute Eigen Vector");
        System.out.println("13. Solve linear equations");
        System.out.println("14. Use singleton matrices as scalars");
        System.out.println("15. Retrieve all the existing matrices (entered or created) having requested matrix-type labels.");
        System.out.println("16. Create matrices of requested type");
        System.out.println("17. Exit");
    }
    public static void print_1(){
        System.out.println("Select which matrice to create");
        System.out.println("1. Rectangular Matrix");
        System.out.println("2. Row Matrix ") ;
        System.out.println("3. Column Matrix");
        System.out.println("4. Square Matrix");
        System.out.println("5. Symmetric Matrix");
        System.out.println("6. Skew-symmetric Matrix");
        System.out.println("7. Upper-triangular Matrix");
        System.out.println("8. Lower-triangular Matrix");
        System.out.println("9. Singular Matrix");
        System.out.println("10. Diagonal Matrix");
        System.out.println("11. Scalar Matrix");
        System.out.println("12. Identity Matrix");
        System.out.println("13. Singleton Matrix");
        System.out.println("14. Ones Matrix");
        System.out.println("15. Null Matrix");
    }
}
